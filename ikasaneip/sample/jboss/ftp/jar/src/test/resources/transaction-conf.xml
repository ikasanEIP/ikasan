<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">



    <!--<bean id="transactionManager" class="org.ikasan.sample.ftp.tx.MockedTransactionManager"/>-->

    <!-- Optional: add a log administrator -->
    <bean id="localLogAdministrator"
          class="com.atomikos.icatch.admin.imp.LocalLogAdministrator"/>

    <bean id="userTransactionService"
          class="com.atomikos.icatch.config.UserTransactionServiceImp"
          init-method="init" destroy-method="shutdownForce">
        <constructor-arg>
            <!-- IMPORTANT: specify all Atomikos properties here -->
            <props>
                <prop key="com.atomikos.icatch.service">
                    com.atomikos.icatch.standalone.UserTransactionServiceFactory
                </prop>
            </props>
        </constructor-arg>
        <property name="initialLogAdministrators">
            <list>
                <ref bean="localLogAdministrator"/>
            </list>
        </property>
    </bean>

    <!--
         Construct Atomikos UserTransactionManager,
         needed to configure Spring
    -->
    <bean id="AtomikosTransactionManager"
          class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close"
          depends-on="userTransactionService">

        <!-- IMPORTANT: disable startup because the userTransactionService above does this -->
        <property name="startupTransactionService" value="false"/>

        <!--
              when close is called,
              should we force transactions to terminate or not?
        -->
        <property name="forceShutdown" value="false" />
    </bean>

    <!--
         Also use Atomikos UserTransactionImp,
         needed to configure Spring
    -->
    <bean id="AtomikosUserTransaction"
          class="com.atomikos.icatch.jta.UserTransactionImp"
          depends-on="userTransactionService">
        <property name="transactionTimeout" value="300" />
    </bean>

    <!--
       Configure the Spring framework to use JTA transactions from Atomikos
    -->
    <bean id="transactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager"
          depends-on="userTransactionService">
        <property name="transactionManager" ref="AtomikosTransactionManager" />
        <property name="userTransaction" ref="AtomikosUserTransaction" />
    </bean>

    <aop:config>
        <aop:pointcut id="jmsMessagePointcut" expression="execution(* javax.jms.MessageListener.onMessage(..))" />
        <aop:advisor advice-ref="required-TransactionAdvice" pointcut-ref="jmsMessagePointcut" />
    </aop:config>

    <aop:config>
        <aop:pointcut id="scheduledPointcut" expression="execution(* org.quartz.Job.execute(..))" />
        <aop:advisor advice-ref="required-TransactionAdvice" pointcut-ref="scheduledPointcut" />
    </aop:config>

    <aop:config>
        <aop:pointcut id="exceptionHandlerInvocation" expression="execution(* org.ikasan.exclusion.dao.HibernateExclusionServiceDao.add(..))"/>
        <aop:advisor advice-ref="exceptionHandlerTxAdvice" pointcut-ref="exceptionHandlerInvocation"/>
    </aop:config>

    <tx:annotation-driven />
    <!-- MANDATORY will enroll in an existing transaction; or throw exception if string doesnt exist -->
    <tx:advice id="mandatory-TransactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="MANDATORY" />
        </tx:attributes>
    </tx:advice>

    <!-- REQUIRED will enroll in any existing transaction or create a new transaction if string doesnt exist -->
    <tx:advice id="required-TransactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>

    <!-- NOT_SUPPORTED will enroll in any existing transaction or create a new transaction if string doesnt exist -->
    <tx:advice id="notSupported-TransactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="NOT_SUPPORTED" />
        </tx:attributes>
    </tx:advice>

    <tx:advice id="exceptionHandlerTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRES_NEW"/>
        </tx:attributes>
    </tx:advice>


</beans>