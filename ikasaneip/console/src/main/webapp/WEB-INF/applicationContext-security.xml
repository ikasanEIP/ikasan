<?xml version="1.0" encoding="UTF-8"?>
<!-- 
# //
# // $Id$
# // $URL$
# // 
# // ====================================================================
# // Ikasan Enterprise Integration Platform
# // 
# // Distributed under the Modified BSD License.
# // Copyright notice: The copyright for this software and a full listing 
# // of individual contributors are as shown in the packaged copyright.txt 
# // file. 
# // 
# // All rights reserved.
# //
# // Redistribution and use in source and binary forms, with or without 
# // modification, are permitted provided that the following conditions are met:
# //
# //  - Redistributions of source code must retain the above copyright notice, 
# //    this list of conditions and the following disclaimer.
# //
# //  - Redistributions in binary form must reproduce the above copyright notice, 
# //    this list of conditions and the following disclaimer in the documentation 
# //    and/or other materials provided with the distribution.
# //
# //  - Neither the name of the ORGANIZATION nor the names of its contributors may
# //    be used to endorse or promote products derived from this software without 
# //    specific prior written permission.
# //
# // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
# // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
# // USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# // ====================================================================
# //
# // Author:  Ikasan Development Team
# // 
-->
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">
	<!-- 
        Declare the access denied page & force people to go to the login screen 
        if they try to go elsewhere first.
     -->
    <http access-denied-page="/accessDenied.jsp" auto-config='true'>
        <!-- For login.jsp, css and images we don't apply security -->
    	<intercept-url pattern="/login.jsp*" filters="none" />
    	<intercept-url pattern='/css/*' filters='none' />
    	<intercept-url pattern='/images/*' filters='none' />
        <!-- You need ROLE_ADMIN for admin pages -->
    	<intercept-url pattern="/admin/*" access="ROLE_ADMIN" />
        <!-- You need ROLE_USER for all pages -->
    	<intercept-url pattern="/**" access="ROLE_USER" />
        <!-- If you fail login then redirect to the login.jsp page but with the extra parameter indicating failure -->
    	<form-login login-page='/login.jsp'	authentication-failure-url='/login.jsp?login_error=1' />
	</http>

    <!-- The authentication provider, use the SHA1 encoding for password obscuring -->
	<authentication-provider user-service-ref="userDetailsService">
		<password-encoder ref="sha1PasswordEncoder" />
	</authentication-provider>
    
    <!-- The SHA1 password encoder provider -->
    <beans:bean id="sha1PasswordEncoder" class="org.springframework.security.providers.encoding.ShaPasswordEncoder"/>

    <!-- The user details service -->
	<beans:bean id="userDetailsService" class="org.ikasan.framework.security.service.UserServiceImpl">
		<beans:constructor-arg ref="userDao"/>
		<beans:constructor-arg ref="authorityDao"/>
		<beans:constructor-arg ref="sha1PasswordEncoder"/>
	</beans:bean>
	
    <!-- The User DAO -->
	<beans:bean id="userDao" class="org.ikasan.framework.security.dao.HibernateUserDao">
        <beans:property name="sessionFactory" ref="securitySessionFactory"/>
    </beans:bean>
	
    <!-- The Authority DAO -->
    <beans:bean id="authorityDao" class="org.ikasan.framework.security.dao.HibernateAuthorityDao">
        <beans:property name="sessionFactory" ref="securitySessionFactory"/>
    </beans:bean>	

    <!-- The security session factory -->
    <beans:bean id="securitySessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="ikasanAdminLocalTxDataSource" />
        <beans:property name="mappingResources">
            <beans:list>
                <beans:value>org/ikasan/framework/security/model/User.hbm.xml</beans:value>
                <beans:value>org/ikasan/framework/security/model/Authority.hbm.xml</beans:value>
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties" ref="platformHibernateProperties"/>
    </beans:bean>

	<!-- Automatically receives AuthenticationEvent messages -->
	<beans:bean id="loggerListener" class="org.springframework.security.event.authentication.LoggerListener" />

    <!-- The access decision manager -->
	<global-method-security access-decision-manager-ref="accessDecisionManager">

		<!--
			AspectJ pointcut expressions that locates our "post" method and
			applies security to that call.
		-->
        <protect-pointcut
            expression="execution(* org.ikasan.framework.security.service.UserService.changeUsersPassword(..))"
            access="ROLE_ADMIN" />
        <protect-pointcut
            expression="execution(* org.ikasan.framework.security.service.UserService.grantAuthority(..))"
            access="ROLE_ADMIN" />
        <protect-pointcut
            expression="execution(* org.ikasan.framework.security.service.UserService.revokeAuthority(..))"
            access="ROLE_ADMIN" />
	    <!-- Gaining access to a Module requires security check -->
        <!-- 
		<protect-pointcut 
            expression="execution(* org.ikasan.framework.module.service.ModuleService.getModule(..))"
            access="ROLE_USER,AFTER_MODULE_READ" /> 
        <protect-pointcut
            expression="execution(* org.ikasan.framework.module.service.ModuleService.getModules())"
            access="ROLE_USER,AFTER_MODULE_COLLECTION_READ" />
        -->
        <!-- 
        <protect-pointcut 
            expression="execution(* org.ikasan.console.pointtopointflow.service.PointToPointFlowProfileService.getModuleNames(..))"
            access="ROLE_USER,AFTER_MODULE_READ" /> 
        <protect-pointcut
            expression="execution(* org.ikasan.console.pointtopointflow.service.PointToPointFlowProfileService.getModuleNames(..))"
            access="ROLE_USER,AFTER_MODULE_COLLECTION_READ" />
        <protect-pointcut 
            expression="execution(* org.ikasan.console.pointtopointflow.service.PointToPointFlowProfileService.getModuleNames())"
            access="ROLE_USER,AFTER_MODULE_READ" /> 
        <protect-pointcut
            expression="execution(* org.ikasan.console.pointtopointflow.service.PointToPointFlowProfileService.getModuleNames())"
            access="ROLE_USER,AFTER_MODULE_COLLECTION_READ" />
		-->
	</global-method-security>

    <!-- The access decision manager -->    
	<beans:bean id="accessDecisionManager" class="org.springframework.security.vote.UnanimousBased">
    	<beans:property name="allowIfAllAbstainDecisions" value="true"/>
	    <beans:property name="decisionVoters">
	       <beans:list>
	           <beans:bean id="roleVoter" class="org.springframework.security.vote.RoleVoter"/>
	       </beans:list>
	   </beans:property>
	</beans:bean>
	
    <!-- The access decision manager for what modules are allowed to be viewed by a user -->
    <beans:bean id="moduleCollectionFilteringAfterInvocationProvider"
        class="org.ikasan.console.security.AfterInvocationModuleCollectionFilteringProvider">
        <custom-after-invocation-provider />
    </beans:bean>
    
    <!-- The access decision manager for what modules are allowed to be invoked by a user -->
    <beans:bean id="moduleAfterInvocationProvider"
        class="org.ikasan.console.security.ModuleAfterInvocationProvider">
        <custom-after-invocation-provider />
    </beans:bean>

</beans:beans>
