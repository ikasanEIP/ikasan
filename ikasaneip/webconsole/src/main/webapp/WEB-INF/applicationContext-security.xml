<?xml version="1.0" encoding="UTF-8"?>
<!-- 
# //
# //
# // $Id$
# // $URL$
# // 
# // ====================================================================
# // Ikasan Enterprise Integration Platform
# // Copyright (c) 2003-2008 Mizuho International plc. and individual contributors as indicated
# // by the @authors tag. See the copyright.txt in the distribution for a
# // full listing of individual contributors.
# //
# // This is free software; you can redistribute it and/or modify it
# // under the terms of the GNU Lesser General Public License as
# // published by the Free Software Foundation; either version 2.1 of
# // the License, or (at your option) any later version.
# //
# // This software is distributed in the hope that it will be useful,
# // but WITHOUT ANY WARRANTY; without even the implied warranty of
# // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# // Lesser General Public License for more details.
# //
# // You should have received a copy of the GNU Lesser General Public
# // License along with this software; if not, write to the 
# // Free Software Foundation Europe e.V. Talstrasse 110, 40217 Dusseldorf, Germany 
# // or see the FSF site: http://www.fsfeurope.org/.
# // ====================================================================
# //
# // Author:  Ikasan Development Team
# // 
-->
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">
	<http access-denied-page="/accessDenied.jsp" auto-config='true'>
		<intercept-url pattern="/login.jsp*" filters="none" />
		<intercept-url pattern='/css/*' filters='none' />
		<intercept-url pattern='/images/*' filters='none' />
		<intercept-url pattern="/admin/*" access="ROLE_ADMIN" />
		<intercept-url pattern="/**" access="ROLE_USER" />
		<form-login login-page='/login.jsp'
			authentication-failure-url='/login.jsp?login_error=1' />

	</http>


	<authentication-provider user-service-ref="userDetailsService">
		<password-encoder ref="sha1PasswordEncoder" />
	</authentication-provider>
    
    <beans:bean id="sha1PasswordEncoder" class="org.springframework.security.providers.encoding.ShaPasswordEncoder"/>

	<beans:bean id="userDetailsService"
		class="org.ikasan.framework.security.service.UserServiceImpl">
		<beans:constructor-arg ref="userDao"/>
		<beans:constructor-arg ref="authorityDao"/>
		<beans:constructor-arg ref="sha1PasswordEncoder"/>
	</beans:bean>
	
	<beans:bean id="userDao" class="org.ikasan.framework.security.dao.HibernateUserDao">
        <beans:property name="sessionFactory" ref="securitySessionFactory"/>
    </beans:bean>
	
    <beans:bean id="authorityDao" class="org.ikasan.framework.security.dao.HibernateAuthorityDao">
        <beans:property name="sessionFactory" ref="securitySessionFactory"/>
    </beans:bean>	


     <beans:bean id="securitySessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="ikasanAdminLocalTxDataSource" />
        <beans:property name="mappingResources">
            <beans:list>
                <beans:value>org/ikasan/framework/security/model/User.hbm.xml</beans:value>
                <beans:value>org/ikasan/framework/security/model/Authority.hbm.xml</beans:value>
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties" ref="platformHibernateProperties"/>
    </beans:bean>

	<!-- Automatically receives AuthenticationEvent messages -->
	<beans:bean id="loggerListener"
		class="org.springframework.security.event.authentication.LoggerListener" />

	<global-method-security access-decision-manager-ref="accessDecisionManager">

		
		<!--
			AspectJ pointcut expression that locates our "post" method and
			applies security that way
		-->

		<protect-pointcut
			expression="execution(* org.ikasan.framework.module.service.ModuleService.startInitiator(..))"
			access="MODULE_ADMIN" />
		<protect-pointcut
			expression="execution(* org.ikasan.framework.module.service.ModuleService.stopInitiator(..))"
			access="MODULE_ADMIN" />
        <protect-pointcut
            expression="execution(* org.ikasan.framework.security.service.UserService.changeUsersPassword(..))"
            access="ROLE_ADMIN" />
            
        <protect-pointcut
            expression="execution(* org.ikasan.framework.security.service.UserService.grantAuthority(..))"
            access="ROLE_ADMIN" />
        
        <protect-pointcut
            expression="execution(* org.ikasan.framework.security.service.UserService.revokeAuthority(..))"
            access="ROLE_ADMIN" />

	    <!-- Gaining access to a Module requires security check -->
		<protect-pointcut 
            expression="execution(* org.ikasan.framework.module.service.ModuleService.getModule(..))"
            access="ROLE_USER,AFTER_MODULE_READ" /> 
        <protect-pointcut
            expression="execution(*
            org.ikasan.framework.module.service.ModuleService.getModules())"
            access="ROLE_USER,AFTER_MODULE_COLLECTION_READ" />
		
	</global-method-security>

	<beans:bean id="accessDecisionManager" class="org.springframework.security.vote.UnanimousBased">
    	<beans:property name="allowIfAllAbstainDecisions" value="true"/>
	    <beans:property name="decisionVoters">
	       <beans:list>
	           <beans:bean id="roleVoter" class="org.springframework.security.vote.RoleVoter"/>
	           <beans:bean id="moduleAdminVoter" class="org.ikasan.framework.security.ModuleAdminVoter"/>  
	       </beans:list>
	   </beans:property>
	</beans:bean>
	
    <beans:bean id="moduleCollectionFilteringAfterInvocationProvider"
        class="org.ikasan.framework.security.AfterInvocationModuleCollectionFilteringProvider">
        <custom-after-invocation-provider />
    </beans:bean>
    
    <beans:bean id="moduleAfterInvocationProvider"
        class="org.ikasan.framework.security.ModuleAfterInvocationProvider">
        <custom-after-invocation-provider />
    </beans:bean>



</beans:beans>
