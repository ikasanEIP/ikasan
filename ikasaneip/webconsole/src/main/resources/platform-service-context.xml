<?xml version="1.0" encoding="UTF-8"?>
<!-- 
# //
# //
# // $Id$
# // $URL$
# // 
# // ====================================================================
# // Ikasan Enterprise Integration Platform
# // 
# // Distributed under the Modified BSD License.
# // Copyright notice: The copyright for this software and a full listing 
# // of individual contributors are as shown in the packaged copyright.txt 
# // file. 
# // 
# // All rights reserved.
# //
# // Redistribution and use in source and binary forms, with or without 
# // modification, are permitted provided that the following conditions are met:
# //
# //  - Redistributions of source code must retain the above copyright notice, 
# //    this list of conditions and the following disclaimer.
# //
# //  - Redistributions in binary form must reproduce the above copyright notice, 
# //    this list of conditions and the following disclaimer in the documentation 
# //    and/or other materials provided with the distribution.
# //
# //  - Neither the name of the ORGANIZATION nor the names of its contributors may
# //    be used to endorse or promote products derived from this software without 
# //    specific prior written permission.
# //
# // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
# // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
# // USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# // ====================================================================
# //
# // Author:  Ikasan Development Team
# // 
-->
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:util="http://www.springframework.org/schema/util"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

	<!-- hibernate properties loading -->
	<bean id="platformHibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="ignoreResourceNotFound" value="true"/>
		<property name="location" value="classpath:ikasan-hibernate.properties"/>
	</bean>


	<!--  flow invocation beans -->
	<bean id="flowElementInvoker"
		class="org.ikasan.framework.flow.invoker.VisitingFlowElementInvoker">
		<property name="flowEventListener" ref="flowEventListener" />
	</bean>
	
	<bean id="flowEventListener"
		class="org.ikasan.framework.flow.event.listener.JobAwareFlowEventListener">
		<constructor-arg ref="jobsMap"/>
		<constructor-arg ref="triggerDao"/>
	</bean>
	
	<bean id="jobsMap" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="loggingJob" value-ref="loggingJob" />
				<entry key="wiretapJob" value-ref="wiretapJob" />
			</map>
		</constructor-arg>
		</bean>

	<bean id="loggingJob" class="org.ikasan.framework.flow.event.service.LoggingEventJob" />

	<bean id="wiretapJob" class="org.ikasan.framework.flow.event.service.WiretapEventJob">
		<constructor-arg ref="wiretapService" />
	</bean>







	<!-- default non validating document builder factory -->
	<bean id="documentBuilderFactory" lazy-init="true"
		class="javax.xml.parsers.DocumentBuilderFactory" factory-method="newInstance">
		<property name="namespaceAware" value="true" />
	</bean>

	<!-- dtd validating document builder factory -->
	<bean id="dtdValidatingDocumentFactory" lazy-init="true"
		class="javax.xml.parsers.DocumentBuilderFactory" factory-method="newInstance">
		<property name="validating" value="true"/>
		<property name="namespaceAware" value="true" />
	</bean>

	<!-- xsd validating document builder factory -->
	<bean id="xsdValidatingDocumentFactory" lazy-init="true"
		class="javax.xml.parsers.DocumentBuilderFactory" factory-method="newInstance">
		<property name="validating" value="true"/>
		<property name="namespaceAware" value="true" />
	</bean>

	<!-- configure the document builder factory to use xsd -->
  	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
     	<property name="targetObject" ref="xsdValidatingDocumentFactory"/>
     	<property name="targetMethod" value="setAttribute"/>
     	<property name="arguments">
			<list>
				<util:constant static-field="org.apache.xerces.jaxp.JAXPConstants.JAXP_SCHEMA_LANGUAGE" />
				<util:constant static-field="org.apache.xerces.jaxp.JAXPConstants.W3C_XML_SCHEMA" />
			</list>
     	</property>
  	</bean>
  	
  	
  	
  	<!-- default payloadFactory -->
  	<bean id="payloadFactory" class="org.ikasan.common.factory.PayloadFactoryImpl"/>
  	
  	
     	
  	<bean id="jmsMessageEventSerialiser" 
      class="org.ikasan.framework.event.serialisation.DefaultMapMessageEventSerialiser">
        <property name="payloadFactory" ref="payloadFactory"/>
    </bean>




	   <!-- Connection Factories -->
	  <bean id="jmsConnectionFactory"
	      class="org.springframework.jndi.JndiObjectFactoryBean">
	      <property name="jndiName" value="java:/JmsXA" />
	      <property name="lookupOnStartup" value="false" />
	      <property name="proxyInterface" value="javax.jms.ConnectionFactory" />
	  </bean>
  
    
  	<!-- ###################################### -->
  	<!-- common transaction services start here -->
    <!-- ###################################### -->  	
  	
  	
  	<!-- transaction advice requiring a new transaction on entry -->
    <tx:advice id="requiresNew-TransactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRES_NEW"/>
        </tx:attributes>
    </tx:advice>
    
    <tx:advice id="required-TransactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    
    


    
  <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
    <property name="transactionManagerName" value="java:/TransactionManager"/>
    <property name="userTransactionName" value="UserTransaction"/>
  </bean>

  
  <bean id="rawTransactionManager" class="org.springframework.jndi.JndiObjectFactoryBean">
  	<property name="jndiName" value="java:/TransactionManager"/>
  </bean>
    <!-- ###################################### -->
    <!-- common transaction services end here   -->
    <!-- ###################################### -->
    
	
</beans>