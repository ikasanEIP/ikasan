<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ $URL$ ==================================================================== 
	Ikasan Enterprise Integration Platform Distributed under the Modified BSD 
	License. Copyright notice: The copyright for this software and a full listing 
	of individual contributors are as shown in the packaged copyright.txt file. 
	All rights reserved. Redistribution and use in source and binary forms, with 
	or without modification, are permitted provided that the following conditions 
	are met: - Redistributions of source code must retain the above copyright 
	notice, this list of conditions and the following disclaimer. - Redistributions 
	in binary form must reproduce the above copyright notice, this list of conditions 
	and the following disclaimer in the documentation and/or other materials 
	provided with the distribution. - Neither the name of the ORGANIZATION nor 
	the names of its contributors may be used to endorse or promote products 
	derived from this software without specific prior written permission. THIS 
	SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
	IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY 
	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ==================================================================== 
	Author: Ikasan Development Team -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<bean id="Sybase12"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="singleton" value="true" />

		<property name="properties">
			<props>
				<prop key="drop.usersAuthorities">DROP TABLE UsersAuthorities;</prop>
				<prop key="drop.authorities">DROP TABLE Authorities;</prop>
				<prop key="drop.users">DROP TABLE Users;</prop>
				<prop key="drop.consolePointToPointFlow">DROP TABLE PointToPointFlow</prop>
				<prop key="drop.consolePointToPointFlowProfile">DROP TABLE PointToPointFlowProfile;</prop>
				<prop key="drop.consoleModule">DROP TABLE Module;</prop>
				<prop key="drop.moduleStartup">DROP TABLE StartupControl;</prop>
				<prop key="drop.systemEvent">DROP TABLE SystemEVent;</prop>
				<prop key="drop.confParamString">DROP TABLE ConfParamString;</prop>
				<prop key="drop.confParamMaskedString">DROP TABLE ConfParamMaskedString;</prop>
				<prop key="drop.confParamMapString">DROP TABLE ConfParamMapString;</prop>
				<prop key="drop.confParamMap">DROP TABLE ConfParamMap;</prop>
				<prop key="drop.confParamLong">DROP TABLE ConfParamLong;</prop>
				<prop key="drop.confParamListString">DROP TABLE ConfParamListString;</prop>
				<prop key="drop.confParamList">DROP TABLE ConfParamList;</prop>
				<prop key="drop.confParamInteger">DROP TABLE ConfParamInteger;</prop>
				<prop key="drop.confParamBoolean">DROP TABLE ConfParamBoolean;</prop>
				<prop key="drop.configurationParameter">DROP TABLE ConfigurationParameter;</prop>
				<prop key="drop.configuration">DROP TABLE Configuration;</prop>
				<prop key="drop.flowEventTriggerParameters">DROP TABLE FlowEventTriggerParameters;</prop>
				<prop key="drop.flowEVentTrigger">DROP TABLE FlowEventTrigger;</prop>
				<prop key="drop.version">DROP TABLE Version;</prop>
				<prop key="drop.exclusionEvent">DROP TABLE ExclusionEvent;</prop>
                <prop key="drop.errorOccurrence">DROP TABLE ErrorOccurrence;</prop>
				<prop key="drop.filter">DROP TABLE MessageFilter;</prop>
				<prop key="drop.wiretap">DROP TABLE IkasanWiretap;</prop>
				<prop key="drop.rolePolicy">DROP TABLE RolePolicy;</prop>
				<prop key="drop.principalRole">DROP TABLE PrincipalRole;</prop>
				<prop key="drop.securityPolicy">DROP TABLE SecurityPolicy;</prop>
				<prop key="drop.securityPolicy">DROP TABLE SecurityRole;</prop>
				<prop key="drop.securityPrincipal">DROP TABLE SecurityPrincipal;</prop>
				<prop key="drop.mappingKeyLocationQuery">DROP TABLE MCSKeyLocationQuery;</prop>
				<prop key="drop.mappingConfiguration">DROP TABLE MCSConfigurationConfiguration;</prop>
				<prop key="drop.mappingConfigurationClient">DROP TABLE MCSConfigurationClient;</prop>
				<prop key="drop.mappingConfigurationContext">DROP TABLE MCSConfigurationContext;</prop>
				<prop key="drop.mappingConfigurationType">DROP TABLE MCSConfigurationType;</prop>			
				<prop key="drop.mappingSourceConfigGroupSeq">DROP TABLE MCSSourceConfigGroupSeq;</prop>
				<prop key="drop.mappingSourceValue">DROP TABLE MCSSourceConfigValue;</prop>
				<prop key="drop.mappingTargetValue">DROP TABLE MCSTargetConfigValue;</prop>
                <!-- FileTransfer tables-->
                <prop key="drop.checksumCommand">DROP TABLE FTChecksumCommand;</prop>
                <prop key="drop.cleanupChunksCommand">DROP TABLE FTCleanupChunksCommand;</prop>
                <prop key="drop.deliverBatchCommand">DROP TABLE FTDeliverBatchCommand;</prop>
                <prop key="drop.deliverFileCommand">DROP TABLE FTDeliverFileCommand;</prop>
                <prop key="drop.fileChunk">DROP TABLE FTFileChunk;</prop>
                <prop key="drop.fileChunkHeader">DROP TABLE FTFileChunkHeader;</prop>
                <prop key="drop.fileFilter">DROP TABLE FTFileFilter;</prop>
                <prop key="drop.retrieveFileCommand">DROP TABLE FTRetrieveFileCommand;</prop>
                <prop key="drop.transactionalResourceCommand">DROP TABLE FTTransactionalResourceCommand;</prop>
                <prop key="drop.xid">DROP TABLE FTXid;</prop>
				
				<!-- Topology tables-->
				<prop key="drop.userBusinessStream">DROP TABLE UserBusinessStream;</prop>
				<prop key="drop.businessStreamFlow">DROP TABLE BusinessStreamFlow;</prop>
				<prop key="drop.businessStream">DROP TABLE BusinessStream;</prop>
				<prop key="drop.component">DROP TABLE Component;</prop>
				<prop key="drop.flow">DROP TABLE Flow;</prop>
				<prop key="drop.ikasanModule">DROP TABLE IkasanModule;</prop>
				<prop key="drop.server">DROP TABLE Server;</prop>
				
				<!-- Hospital tables-->
				<prop key="drop.exclusionEventAction">DROP TABLE ExclusionEventAction;</prop>
				
				<!-- Error categorisation tables-->
				<prop key="drop.errorCategorisationLink">DROP TABLE ErrorCategorisationLink;</prop>
				<prop key="drop.errorCategorisation">DROP TABLE ErrorCategorisation;</prop>

				<!--prop key="driver">com.sybase.jdbc4.jdbc.SybDataSource</prop -->
				<!--prop key="url">jdbc:sybase:Tds:HOSTNAME:PORT/DATABASE</prop -->
				<prop key="driver">net.sourceforge.jtds.jdbc.Driver</prop>
				<prop key="url">jdbc:jtds:sybase://HOSTNAME:PORT/DATABASE</prop>
				
				<!-- Error categorisation tables-->
				<prop key="create.errorCategorisationLink">CREATE TABLE ErrorCategorisationLink
					(
						Id             			NUMERIC(18, 0) 		IDENTITY NOT NULL,
						ErrorCategorisationId	NUMERIC(18, 0) NOT NULL,
						ModuleName 				VARCHAR(64) NOT NULL,
						FlowName 				VARCHAR(64) NOT NULL,
						FlowElementName 		VARCHAR(64) NOT NULL,
						Action 					VARCHAR(32) NOT NULL,
						ExceptionClass 			VARCHAR(255) NOT NULL,
						PRIMARY KEY (Id),
						FOREIGN KEY (ErrorCategorisationId) REFERENCES ErrorCategorisation(Id)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					ErrorCategorisationLink01u ON
					ErrorCategorisationLink(ModuleName,FlowName,FlowElementName, Action, ExceptionClass)</prop>
					
				<prop key="create.errorCategorisation">CREATE TABLE ErrorCategorisation
					(
						Id             			NUMERIC(18, 0) 		IDENTITY NOT NULL,
						ErrorCategory 			VARCHAR(64) NOT NULL,
						ErrorDescription	 	VARCHAR(2048) NOT NULL,
						PRIMARY KEY (Id)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1</prop>		

				<prop key="create.wiretap">CREATE TABLE IkasanWiretap
					(
					Id NUMERIC IDENTITY NOT
					NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT
					NULL,
					ComponentName VARCHAR(128) NOT NULL,
					EventId VARCHAR(255) NOT
					NULL,
					RelatedEventId VARCHAR(255) NULL,
					EventTimestamp NUMERIC
					DEFAULT 0 NOT NULL,
					PayloadContent TEXT NOT NULL,
					CreatedDateTime
					NUMERIC NOT NULL,
					Expiry NUMERIC NOT NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX IkasanWiretap01u ON
					IkasanWiretap(Id)
				</prop>

				<prop key="create.filter">CREATE TABLE MessageFilter
					(
					Criteria NUMERIC DEFAULT 0
					NOT NULL,
					ClientId VARCHAR(256) NOT NULL,
					CriteriaDescription
					VARCHAR(512) NULL,
					CreatedDateTime NUMERIC NOT NULL,
					Expiry NUMERIC
					NOT NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					MessageFilter01u ON MessageFilter(Criteria,ClientId)
				</prop>

				<prop key="create.exclusionEvent">CREATE TABLE ExclusionEvent
					(
                    Id NUMERIC IDENTITY NOT NULL,
                    ModuleName VARCHAR(255) NOT NULL,
                    FlowName VARCHAR(255) NOT NULL,
                    Identifier VARCHAR(255) NOT NULL,
					Event IMAGE NULL,
                    ErrorUri VARCHAR(255) NOT NULL,
					Timestamp NUMERIC DEFAULT 0 NOT NULL,
					Expiry NUMERIC NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					IkasanExclusionEvent01u ON
					ExclusionEvent(Id,ModuleName,FlowName,Identifier)
				</prop>

                <prop key="create.errorOccurrence">CREATE TABLE ErrorOccurrence
                    (
                    Uri VARCHAR(255) NOT NULL,
                    ModuleName VARCHAR(255) NOT NULL,
                    FlowName VARCHAR(255) NOT NULL,
                    FlowElementName VARCHAR(255) NOT NULL,
					ErrorDetail TEXT NULL,
					ErrorMessage TEXT NULL,
					ExceptionClass VARCHAR(512) NULL,
                    EventLifeIdentifier VARCHAR(255) NULL,
                    EventRelatedIdentifier VARCHAR(255) NULL,
                    Action VARCHAR(255) NULL,
					Event IMAGE NULL,
                    Timestamp NUMERIC DEFAULT 0 NOT NULL,
                    Expiry NUMERIC NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX
                    IkasanErrorOccurrence01u ON
                    ErrorOccurrence(ModuleName,FlowName,FlowElementName,Uri,Timestamp)
                </prop>

                <prop key="create.version">CREATE TABLE Version
					(
					Id NUMERIC IDENTITY NOT NULL,
					Component VARCHAR(256) NOT NULL UNIQUE,
					Release VARCHAR(256) NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					CREATE UNIQUE INDEX
					IkasanVersion01u ON Version(Component)
				</prop>

				<prop key="create.version.entry">INSERT INTO Version ( Component, Release )
					VALUES (
					'ikasan', '1.0.0' )
				</prop>

				<prop key="create.flowEventTrigger">CREATE TABLE FlowEventTrigger
					(
					Id NUMERIC IDENTITY NOT
					NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT
					NULL,
					Relationship VARCHAR(32) NOT NULL,
					FlowElementName
					VARCHAR(128),
					JobName VARCHAR(64) NOT NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX FlowEventTrigger01u ON
					FlowEventTrigger(Id)
				</prop>

				<prop key="create.flowEventTriggerParameters">CREATE TABLE FlowEventTriggerParameters
					(
					TriggerId
					NUMERIC NOT NULL,
					ParamName VARCHAR(128) NOT NULL,
					ParamValue
					VARCHAR(128)
					)
					ALTER TABLE FlowEventTriggerParameters
					ADD CONSTRAINT
					FlowEventTriggerParam_Id_FK
					FOREIGN KEY (TriggerId)
					REFERENCES
					FlowEventTrigger (Id)
				</prop>

				<!-- Configuration Table creation -->
				<prop key="create.configuration">CREATE TABLE Configuration
					(
					ConfigurationId
					VARCHAR(256) NOT NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					Configuration01u ON Configuration(ConfigurationId)
				</prop>

				<prop key="create.configurationParameter">CREATE TABLE ConfigurationParameter
					(
					Id NUMERIC
					IDENTITY NOT NULL,
					ConfigurationIdentifier VARCHAR(256) NOT NULL,
					PositionRef NUMERIC,
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE
					INDEX ConfigurationParameter01u ON
					ConfigurationParameter(ConfigurationIdentifier, PositionRef)
				</prop>

				<prop key="create.confParamBoolean">CREATE TABLE ConfParamBoolean
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value BIT DEFAULT 0,
					Description
					VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamBoolean01u ON ConfParamBoolean(Id)
				</prop>

				<prop key="create.confParamInteger">CREATE TABLE ConfParamInteger
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value NUMERIC DEFAULT NULL NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamInteger01u ON
					ConfParamInteger(Id)
				</prop>

				<prop key="create.confParamList">
					CREATE TABLE ConfParamList
					(
					Id NUMERIC NOT NULL,
					Name
					VARCHAR(128) NOT NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					ConfParamList01u ON ConfParamList(Id)
				</prop>

				<prop key="create.confParamListString">
					CREATE TABLE ConfParamListString
					(
					Id NUMERIC NOT NULL,
					PositionRef NUMERIC NOT NULL,
					Value TEXT DEFAULT NULL NULL
					)
					LOCK
					DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					ConfParamListString01u ON ConfParamListString(Id,
					PositionRef)
				</prop>

				<prop key="create.confParamLong">
					CREATE TABLE ConfParamLong
					(
					Id NUMERIC NOT NULL,
					Name
					VARCHAR(128) NOT NULL,
					Value NUMERIC DEFAULT NULL NULL,
					Description
					VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamLong01u ON ConfParamLong(Id)
				</prop>

				<prop key="create.confParamMap">
					CREATE TABLE ConfParamMap
					(
					Id NUMERIC NOT NULL,
					Name
					VARCHAR(128) NOT NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamMap01u
					ON ConfParamMap(Id)
				</prop>

				<prop key="create.confParamMapString">
					CREATE TABLE ConfParamMapString
					(
					Id NUMERIC NOT NULL,
					MapKey VARCHAR(256) NOT NULL,
					Value TEXT DEFAULT NULL NULL
					)
					LOCK
					DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					ConfParamMapString01u ON ConfParamMapString(Id,
					MapKey)
				</prop>

				<prop key="create.confParamString">
					CREATE TABLE ConfParamString
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value TEXT DEFAULT NULL NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamString01u ON
					ConfParamString(Id)
				</prop>
				
				<prop key="create.confParamMaskedString">
					CREATE TABLE ConfParamMaskedString
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value TEXT DEFAULT NULL NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamMaskedString01u ON
					ConfParamMaskedString(Id)
				</prop>


				<prop key="create.systemEvent">CREATE TABLE SystemEvent
					(
					Id NUMERIC IDENTITY NOT
					NULL,
					Subject VARCHAR(128) NOT NULL,
					Action VARCHAR(512) NOT NULL,
					Actor VARCHAR(64) NULL,
					Timestamp DATETIME NOT NULL,
					Expiry DATETIME
					NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					SystemEvent01u ON SystemEvent(Id)
				</prop>

				<prop key="create.moduleStartup">CREATE TABLE StartupControl
					(
					Id NUMERIC IDENTITY NOT
					NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT
					NULL,
					StartupType VARCHAR(16) NOT NULL,
					Comment VARCHAR(256) NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					StartupControl01u ON StartupControl(Id)
				</prop>

				<prop key="create.consoleModule">CREATE TABLE Module(
					Id NUMERIC IDENTITY NOT NULL
					PRIMARY KEY,
					Name VARCHAR(255) NOT NULL,
					Description VARCHAR(255) NOT
					NULL,
					DesignDiagramURL VARCHAR(255) NULL,
					UNIQUE (Name)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.consolePointToPointFlowProfile">CREATE TABLE PointToPointFlowProfile(
					Id NUMERIC
					IDENTITY NOT NULL PRIMARY KEY,
					Name VARCHAR(255) NOT NULL
					)
					LOCK
					DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.consolePointToPointFlow">CREATE TABLE PointToPointFlow(
					Id NUMERIC IDENTITY NOT
					NULL PRIMARY KEY,
					PointToPointFlowProfileId NUMERIC NOT NULL,
					FromModuleId NUMERIC NULL,
					ToModuleId NUMERIC NULL,
					CONSTRAINT
					PTPP_ID_FK FOREIGN KEY(PointToPointFlowProfileId) REFERENCES
					PointToPointFlowProfile(Id)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>

				<prop key="create.users">CREATE TABLE Users
					(
					Id 					NUMERIC IDENTITY NOT NULL PRIMARY KEY,
					Username 			VARCHAR(50) NOT NULL UNIQUE,
					Password			VARCHAR(50) NOT NULL,
					Email 				VARCHAR(255) NULL,
					FirstName			VARCHAR(50) NULL,
					Surname				VARCHAR(50) NULL,
					Department			VARCHAR(50) NULL,
					Enabled 			BIT NOT NULL,
					PreviousAccess 		NUMERIC DEFAULT 0 NOT NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.authorities">CREATE TABLE Authorities
					(
					Id NUMERIC IDENTITY NOT NULL
					PRIMARY KEY,
					Authority VARCHAR(50) NOT NULL UNIQUE,
					Description
					VARCHAR(512)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.usersAuthorities">CREATE TABLE UsersAuthorities
					(
					UserId NUMERIC NOT
					NULL,
					AuthorityId NUMERIC NOT NULL,
					PRIMARY KEY (UserId,AuthorityId),
					CONSTRAINT USER_AUTH_USER_FK FOREIGN KEY(UserId) REFERENCES
					Users(Id),
					CONSTRAINT USER_AUTH_AUTH_FK FOREIGN KEY(AuthorityId)
					REFERENCES
					Authorities(Id)
					)
				</prop>
				<prop key="create.defaultAuthorities">INSERT INTO Authorities ( Authority, Description )
					VALUES ( 'ROLE_USER', 'Users who may log into the system' )
					INSERT
					INTO Authorities ( Authority, Description )
					VALUES ( 'ROLE_ADMIN',
					'Users who may perform administration functions on
					the system' )
				</prop>

				<prop key="create.defaultAdminUser">declare @authorityUserId numeric(18),
					@authorityAdminId numeric(18), @username varchar(50), @userId
					numeric(18)

					select @authorityUserId = Id from Authorities where
					Authority =
					'ROLE_USER'
					select @authorityAdminId = Id from
					Authorities where Authority =
					'ROLE_ADMIN'

					select @username = 'admin'

					INSERT INTO Users ( Username, Password, Enabled, FirstName, Surname )
					VALUES (
					@username, 'd033e22ae348aeb5660fc2140aec35850c4da997', 1 , 'Admin', 'User')
					select
					@userId = Id from Users where Username = @username

					INSERT INTO
					UsersAuthorities values ( @userId, @authorityUserId )
					INSERT INTO
					UsersAuthorities values ( @userId, @authorityAdminId )
				</prop>

				<prop key="find.anyAdminUser">SELECT * FROM UsersAuthorities</prop>				
				<prop key="find.usersTableExists">SELECT * from Users</prop>
				
				
				<!--  Tables required for the security module -->
				<prop key="create.securityPrincipal">CREATE TABLE SecurityPrincipal
					(
					   Id               	NUMERIC(18, 0) 		   IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		   UNIQUE NOT NULL,
					   PrincipalType		VARCHAR(256)		    NOT NULL,
					   Description			VARCHAR(1024)		    NOT NULL,
					   CreatedDateTime      DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX Principal_Name ON SecurityPrincipal(Name)
					CREATE NONCLUSTERED INDEX Principal_Type ON SecurityPrincipal(PrincipalType)
				</prop>
				<prop key="create.securityRole">CREATE TABLE SecurityRole
					(
					   Id               	NUMERIC(18, 0) 		       IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		       UNIQUE NOT NULL,
					   Description	     	VARCHAR(1024)		   	   NOT NULL,
					   CreatedDateTime      DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX Role_Name ON SecurityRole(Name)
				</prop>
				<prop key="create.securityPolicy">CREATE TABLE SecurityPolicy
					(
					   Id               				NUMERIC(18, 0) IDENTITY NOT NULL,
					   PolicyLinkId               		NUMERIC(18, 0) NULL,
					   Name		      					VARCHAR(256) UNIQUE NOT NULL,
					   Description	     				VARCHAR(1024)		   	   NOT NULL,
					   CreatedDateTime      			DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      			DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (PolicyLinkId) REFERENCES PolicyLink(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX Policy_Name ON SecurityPolicy(Name)
				</prop>
				<prop key="create.userPrincipal">CREATE TABLE UserPrincipal
					(
					   UserId         				NUMERIC(18, 0) NOT NULL,
					   PrincipalId               	NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (UserId, PrincipalId), -- clustered index on Id
					   FOREIGN KEY (PrincipalId) REFERENCES SecurityPrincipal(Id),
					   FOREIGN KEY (UserId) REFERENCES Users(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.principalRole">CREATE TABLE PrincipalRole
					(
					   PrincipalId               	NUMERIC(18, 0) NOT NULL,
					   RoleId         				NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (PrincipalId, RoleId), -- clustered index on Id
					   FOREIGN KEY (PrincipalId) REFERENCES SecurityPrincipal(Id),
					   FOREIGN KEY (RoleId) REFERENCES SecurityRole(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.policyLinkType">CREATE TABLE PolicyLinkType
					(
					   Id             				NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) UNIQUE NOT NULL,
					   TableName		      		VARCHAR(256) UNIQUE NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.policyLink">CREATE TABLE PolicyLink
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   PolicyLinkTypeId     		NUMERIC(18, 0) NOT NULL,
					   TargetId         			NUMERIC(18, 0) NOT NULL,
					   Name				      		VARCHAR(256) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (PolicyLinkTypeId) REFERENCES PolicyLinkType(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.rolePolicy">CREATE TABLE RolePolicy
					(
					   RoleId               	    NUMERIC(18, 0) NOT NULL,
					   PolicyId               	    NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (RoleId, PolicyId), -- clustered index on Id
					   FOREIGN KEY (PolicyId) REFERENCES SecurityPolicy(Id),
					   FOREIGN KEY (RoleId) REFERENCES SecurityRole(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				
				<prop key="create.authenticationMethod">CREATE TABLE AuthenticationMethod
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name    		          		VARCHAR(128) NOT NULL,
					   Method    		          	VARCHAR(128) NOT NULL,
					   AuthOrder					NUMERIC(18,0) NOT NULL,
					   LastSynchronised      		DATETIME NULL,
					   Enabled      				BIT DEFAULT 1,
					   LdapServerUrl    		  	VARCHAR(256) NULL,
					   LdapBindUserDn		      	VARCHAR(256) NULL,
					   LdapBindUserPassword   		VARCHAR(256) NULL,
					   LdapUserSearchBaseDn   		VARCHAR(256) NULL,
					   LdapUserSearchFilter   		VARCHAR(256) NULL,
					   EmailAttributeName 			VARCHAR(256) NULL,
					   UserAccNameAttributeName 	VARCHAR(256) NULL,
					   AccountTypeAttributeName   	VARCHAR(256) NULL,
					   AppSecBaseDn   				VARCHAR(256) NULL,
					   AppSecGroupAttributeName 	VARCHAR(256) NULL,
					   FirstNameAttributeName 		VARCHAR(256) NULL,
					   SurnameAttributeName 		VARCHAR(256) NULL,
					   DepartmentAttributeName	 	VARCHAR(256) NULL,
					   AppSecDescAttributeName		VARCHAR(256) NULL,
					   LdapUserDescAttributeName	VARCHAR(256) NULL,
					   MemberofAttributeName		VARCHAR(256) NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				
				<!-- Tables required for the ikasan mapping module -->
				<prop key="create.mappingConfigurationType">CREATE TABLE MCSConfigurationType
					(
					   Id               	NUMERIC(18, 0) 		   IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		   UNIQUE NOT NULL,
					   CreatedDateTime      DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				
				<prop key="create.mappingConfigurationContext">CREATE TABLE MCSConfigurationContext
					(
					   Id               	NUMERIC(18, 0) 		   IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		   UNIQUE NOT NULL,
					   Description	      	VARCHAR(1024)		   NOT NULL,
					   CreatedDateTime      DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				
				<prop key="create.mappingConfigurationClient">CREATE TABLE MCSConfigServiceClient
					(
					   Id               				NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name		      			VARCHAR(256) UNIQUE NOT NULL,
					   KeyLocationQueryProcessorType		VARCHAR(256) NOT NULL,
					   CreatedDateTime      			DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      			DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX ConfigServiceClient_Name ON MCSConfigServiceClient(Name)
				</prop>
				
				<prop key="create.mappingConfiguration">CREATE TABLE MCSMappingConfiguration
					(
					   Id               	  		NUMERIC(18, 0) IDENTITY NOT NULL,
					   SourceContextId         		NUMERIC(18, 0) NOT NULL,
					   TargetContextId         		NUMERIC(18, 0) NOT NULL,
					   NumberOfParams       		NUMERIC(18, 0) NOT NULL,
					   Description         			VARCHAR(1024) NOT NULL,
					   ConfigurationTypeId  		NUMERIC(18, 0) NOT NULL,
					   ConfigurationServiceClientId  	NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (ConfigurationTypeId) REFERENCES MCSConfigurationType(Id),
					   FOREIGN KEY (ConfigurationServiceClientId) REFERENCES MCSConfigServiceClient(Id),
					   FOREIGN KEY (SourceContextId) REFERENCES MCSConfigurationContext(Id),
					   FOREIGN KEY (TargetContextId) REFERENCES MCSConfigurationContext(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					-- This is for StateModelHistory state model id searches
					CREATE NONCLUSTERED INDEX MappingConfig_ConfigTypeId ON MCSMappingConfiguration(ConfigurationTypeId)
					CREATE UNIQUE INDEX MappingConfig_unique ON MCSMappingConfiguration(ConfigurationServiceClientId, SourceContextId, TargetContextId, ConfigurationTypeId)
				</prop>
				
				<prop key="create.mappingTargetValue">CREATE TABLE MCSTargetConfigValue
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   TargetSystemValue    		VARCHAR(256) NOT NULL,   
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				
				<prop key="create.mappingSourceValue">CREATE TABLE MCSSourceConfigValue
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   SourceSystemValue    		VARCHAR(256) NOT NULL,
					   MappingConfigurationId		NUMERIC(18, 0) NOT NULL,
					   TargetConfigurationValueId   NUMERIC(18, 0) NOT NULL,
					   SourceConfigGroupId          NUMERIC(18, 0) NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (MappingConfigurationId) REFERENCES MCSMappingConfiguration(Id),
					   FOREIGN KEY (TargetConfigurationValueId) REFERENCES MCSTargetConfigValue(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX SrcConfigValue_ConfigContextId ON MCSSourceConfigValue(MappingConfigurationId)
					CREATE NONCLUSTERED INDEX SrcConfig_TgtSysConfigValueId ON MCSSourceConfigValue(TargetConfigurationValueId)
				</prop>
				
				<prop key="create.mappingKeyLocationQuery">CREATE TABLE MCSKeyLocationQuery
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   Value			    		VARCHAR(256) NOT NULL,
					   MappingConfigurationId    		NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (MappingConfigurationId) REFERENCES MCSMappingConfiguration(Id),
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX MCSKeyLocQuery_mappingConfId ON MCSKeyLocationQuery(MappingConfigurationId)
				</prop>
				
				<prop key="create.mappingSourceConfigGroupSeq">CREATE TABLE MCSSourceConfigGroupSeq
					(
					   Id               NUMERIC(18, 0) IDENTITY NOT NULL,
					   SequenceNumber   NUMERIC(20, 0) NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					)
					
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
										
					SET IDENTITY_INSERT MCSSourceConfigGroupSeq ON
					insert into MCSSourceConfigGroupSeq (
					   Id
					  ,SequenceNumber
					) VALUES (
					   1
					  ,100)
				   SET IDENTITY_INSERT MCSSourceConfigGroupSeq OFF
				</prop>
				
				<prop key="create.platformConfiguration">CREATE TABLE PlatformConfiguration
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name			    			VARCHAR(256) NOT NULL,
					   Value			    		VARCHAR(256) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id,
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>

                <prop key="create.checksumCommand">CREATE TABLE FTChecksumCommand
                    (
                    Id                   numeric(18,0),
                    Destructive          bit NOT NULL,
                    ChecksumFilePath     varchar(255) NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTChecksumCommand01u
                    ON FTChecksumCommand(Id)
				</prop>

                <prop key="create.cleanupChunksCommand">CREATE TABLE FTCleanupChunksCommand
                    (
                    Id                  numeric(18,0),
                    FileChunkHeaderId   numeric(18,0) NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTCleanupChunksCommand01u
                    ON FTCleanupChunksCommand(Id)
                </prop>

                <prop key="create.deliverBatchCommand">CREATE TABLE FTDeliverBatchCommand
                    (
                    Id                     numeric(18,0),
                    OutputDirectory        varchar(255) NULL,
                    TempDirectory          varchar(255) NULL,
                    BatchFolder            varchar(255) NULL,
                    PutAttempted           bit NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTDeliverBatchCommand01u
                    ON FTDeliverBatchCommand(Id)
                </prop>


                <prop key="create.deliverFileCommand">CREATE TABLE FTDeliverFileCommand
                    (
                    Id                     numeric(18,0),
                    FileName               varchar(255) NULL,
                    TempFileName           varchar(255) NULL,
                    OutputDirectory        varchar(255) NULL,
                    OverwriteExisting      bit NOT NULL,
                    PutAttempted           bit NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTDeliverFileCommand01u
                    ON FTDeliverFileCommand(Id)
                </prop>


                <prop key="create.fileChunkHeader">CREATE TABLE FTFileChunkHeader
                    (
                    Id              numeric(18,0) IDENTITY,
                    SequenceLength  numeric(18,0) NOT NULL,
                    InternalMd5Hash  char(32) NULL,
                    ExternalMd5Hash  char(32) NULL,
                    FileName        varchar(255) NOT NULL,
                    ChunkTimeStamp  numeric(18,0) NOT NULL,
                    ClientId  varchar(255) NULL

                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTFileChunkHeader01u
                    ON FTFileChunkHeader(Id)
                </prop>

                <prop key="create.fileChunk">CREATE TABLE FTFileChunk
                    (
                    Id              numeric(18,0) IDENTITY,
                    Content         image  NOT NULL,
                    Ordinal         numeric(18,0) NOT NULL,
                    Md5Hash  		char(32) NULL,
                    FileChunkHeaderId numeric(18,0) NOT NULL references FTFileChunkHeader(Id)

                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTFileChunk01u
                    ON FTFileChunk(Id)
                </prop>

                <prop key="create.fileFilter">CREATE TABLE FTFileFilter
                    (
                    Id              numeric(18,0) IDENTITY,
                    ClientId        varchar(255)  NOT NULL,
                    Criteria        varchar(512)  NOT NULL,
                    LastModified    datetime      NOT NULL,
                    LastAccessed    datetime      NOT NULL,
                    Size            numeric(18,0) NOT NULL,
                    CreatedDateTime numeric(18, 0) NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTFileFilter01u
                    ON FTFileFilter(Id)

                    CREATE UNIQUE INDEX FTFileFilter02u
                    ON FTFileFilter(ClientId,Criteria,LastModified,Size)

                    CREATE INDEX FTFileFilter03u
                    ON FTFileFilter(ClientId,CreatedDateTime)
                </prop>

                <prop key="create.retrieveFileCommand">CREATE TABLE FTRetrieveFileCommand
                    (
                    Id                   numeric(18,0),
                    Destructive          bit NOT NULL,
                    RenameOnSuccess      bit NOT NULL,
                    RenameExtension      varchar(255) NULL,
                    MoveOnSuccess        bit NOT NULL,
                    MoveNewPath          varchar(255) NULL,
                    SourcePath           varchar(255) NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTRetrieveFileCommand01u
                    ON FTRetrieveFileCommand(Id)
                </prop>

                <prop key="create.xid">CREATE TABLE FTXid
                    (
                    Id              numeric(18,0) IDENTITY,
                    State           varchar(255)  NOT NULL,
                    GlobalTransactionId      varchar(255)  NOT NULL,
                    BranchQualifier          varchar (255)  NOT NULL,
                    FormatId          numeric(18,0)  NOT NULL,
                    ClientId           varchar(255)  NOT NULL,
                    CreatedDateTime  numeric(18,0) NOT NULL,
                    LastUpdatedDateTime  numeric(18,0) NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTXid01u
                    ON FTXid(Id)

                    CREATE UNIQUE INDEX FTXid02u
                    ON FTXid(GlobalTransactionId, BranchQualifier)
                </prop>

                <prop key="create.transactionalResourceCommand">CREATE TABLE FTTransactionalResourceCommand
                    (
                    Id              numeric(18,0) IDENTITY,
                    State           varchar(255)  NOT NULL,
                    Xid_Id numeric(18,0) NOT NULL references FTXid(Id),
                    Type           varchar(255)  NOT NULL,
                    ExecutionTimestamp char(24) NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX TransResCommand01u
                    ON FTTransactionalResourceCommand(Id)
                </prop>
                
                <!--  Topology Service Tables -->
                <prop key="create.server">CREATE TABLE Server
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 		UNIQUE NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   Url		      				VARCHAR(256) 		NOT NULL,
					   Port							NUMERIC(18, 0) 		NOT NULL,
					   CreatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.ikasanModule">CREATE TABLE IkasanModule
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 		UNIQUE NOT NULL,
					   ContextRoot     				VARCHAR(256) 		NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   DiagramUrl      				VARCHAR(256) 		NULL,
					   Version      				VARCHAR(256) 		NULL,
					   ServerId						NUMERIC(18, 0) 		NULL,
					   CreatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.flow">CREATE TABLE Flow
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 	    NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   ModuleId						NUMERIC(18, 0) 		NULL,
					   CreatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.component">CREATE TABLE Component
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 	    NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   IsConfigurable 				BIT DEFAULT 0,
					   FlowId						NUMERIC(18, 0) 		NULL,
					   ComponentOrder				NUMERIC(18, 0) 		NULL,
					   ConfigurationId				VARCHAR(256) 		NULL,
					   CreatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.businessStream">CREATE TABLE BusinessStream
					(
					   Id             				NUMERIC(18, 0) 	IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 	UNIQUE NOT NULL,
					   Description		      		VARCHAR(1024) 	NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.businessStreamFlow">CREATE TABLE BusinessStreamFlow
					(
					   BusinessStreamId				NUMERIC(18, 0) 	NOT NULL,
					   FlowId						NUMERIC(18, 0) 	NOT NULL,
					   FlowOrder					NUMERIC(18, 0) 	NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (BusinessStreamId, FlowId),
					   FOREIGN KEY (BusinessStreamId) REFERENCES BusinessStream(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.userBusinessStream">CREATE TABLE UserBusinessStream
					(
					   UserId						NUMERIC(18, 0) 	NOT NULL,
					   BusinessStreamId				NUMERIC(18, 0) 	NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (UserId, BusinessStreamId),
					   FOREIGN KEY (UserId) REFERENCES Users(Id),
					   FOREIGN KEY (BusinessStreamId) REFERENCES BusinessStream(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <!--  Hospital Service Tables -->
                <prop key="create.exclusionEventAction">CREATE TABLE ExclusionEventAction
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   ErrorUri	      				VARCHAR(256) 		UNIQUE NOT NULL,
					   ModuleName		      		VARCHAR(256) 		NOT NULL,
					   FlowName		      			VARCHAR(256) 		NOT NULL,
					   ActionedBy		      		VARCHAR(256) 		NOT NULL,
					   Action		      			VARCHAR(32) 		NOT NULL,
					   Event		      			IMAGE 				NOT NULL,
					   Timestamp		      		NUMERIC(18, 0) 		NOT NULL,
					   PRIMARY KEY (Id)
					) 

					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE NONCLUSTERED INDEX ExclEventAction_ErrorUri ON ExclusionEventAction(ErrorUri)
                </prop>

				<prop key="create.defaultPrincipal">declare @securityPrincipalId numeric(18),
					@securityRoleId numeric(18), @securityPolicyId numeric(18), @userId numeric(18)
					
					INSERT INTO 
					SecurityPrincipal ( Name, PrincipalType, Description )
					VALUES ( 'admin', 'user', 'This administrator user')
					
					select @securityPrincipalId = Id 
					from SecurityPrincipal 
					where Name = 'admin'
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'ADMIN',
					'Users who may perform administration functions on
					the system' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'ADMIN'
					
					select @userId = Id from Users where Username = 'admin'
					
					INSERT
					INTO UserPrincipal ( UserId, PrincipalId )
					VALUES ( @userId, @securityPrincipalId )
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'ALL', 'Policy to do everything' )
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'ALL'
					
					INSERT
					INTO PrincipalRole ( PrincipalId, RoleId )
					VALUES ( @securityPrincipalId, @securityRoleId )
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'User',
					'Users who have a read only view on the system' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'User'
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'Read Only', 'Read only policy' )
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'Read Only'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'COP Stream Administrator',
					'Cash Operations Stream Administrators' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'COP Stream Administrator'
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'Read Only'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Control', 'Ability to control COP flows' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Control'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Wiretap', 'Ability to view COP wiretaps' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Wiretap'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Errors', 'View COP errors' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Errors'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Replay', 'Policy to replay COP data' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Replay'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Hospital', 'Policy to use the hospital for COP data' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Hospital'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'COP Stream User',
					'Cash Operations Stream User' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'COP Stream User'
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Wiretap'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Errors'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					INSERT
					INTO PolicyLinkType ( Name, TableName )
					VALUES ( 'Mapping Configuration',  'MCSMappingConfiguration' )
				
				</prop>
			</props>
		</property>
	</bean>

	<bean id="Sybase15"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="singleton" value="true" />

		<property name="properties">
			<props>
				<!--prop key="driver">com.sybase.jdbc4.jdbc.SybDataSource</prop -->
				<!--prop key="url">jdbc:sybase:Tds:HOSTNAME:PORT/DATABASE</prop -->
				<prop key="drop.usersAuthorities">DROP TABLE UsersAuthorities;</prop>
				<prop key="drop.authorities">DROP TABLE Authorities;</prop>
				<prop key="drop.users">DROP TABLE Users;</prop>
				<prop key="drop.consolePointToPointFlow">DROP TABLE PointToPointFlow</prop>
				<prop key="drop.consolePointToPointFlowProfile">DROP TABLE PointToPointFlowProfile;</prop>
				<prop key="drop.consoleModule">DROP TABLE Module;</prop>
				<prop key="drop.moduleStartup">DROP TABLE StartupControl;</prop>
				<prop key="drop.systemEvent">DROP TABLE SystemEVent;</prop>
				<prop key="drop.confParamString">DROP TABLE ConfParamString;</prop>
				<prop key="drop.confParamMaskedString">DROP TABLE ConfParamMaskedString;</prop>
				<prop key="drop.confParamMapString">DROP TABLE ConfParamMapString;</prop>
				<prop key="drop.confParamMap">DROP TABLE ConfParamMap;</prop>
				<prop key="drop.confParamLong">DROP TABLE ConfParamLong;</prop>
				<prop key="drop.confParamListString">DROP TABLE ConfParamListString;</prop>
				<prop key="drop.confParamList">DROP TABLE ConfParamList;</prop>
				<prop key="drop.confParamInteger">DROP TABLE ConfParamInteger;</prop>
				<prop key="drop.confParamBoolean">DROP TABLE ConfParamBoolean;</prop>
				<prop key="drop.configurationParameter">DROP TABLE ConfigurationParameter;</prop>
				<prop key="drop.configuration">DROP TABLE Configuration;</prop>
				<prop key="drop.flowEventTriggerParameters">DROP TABLE FlowEventTriggerParameters;</prop>
				<prop key="drop.flowEVentTrigger">DROP TABLE FlowEventTrigger;</prop>
				<prop key="drop.version">DROP TABLE Version;</prop>
                <prop key="drop.exclusionEvent">DROP TABLE ExclusionEvent;</prop>
                <prop key="drop.errorOccurrence">DROP TABLE ErrorOccurrence;</prop>
				<prop key="drop.filter">DROP TABLE MessageFilter;</prop>
				<prop key="drop.wiretap">DROP TABLE IkasanWiretap;</prop>
				<prop key="drop.rolePolicy">DROP TABLE RolePolicy;</prop>
				<prop key="drop.principalRole">DROP TABLE PrincipalRole;</prop>
				<prop key="drop.securityPolicy">DROP TABLE SecurityPolicy;</prop>
				<prop key="drop.securityPolicy">DROP TABLE SecurityRole;</prop>
				<prop key="drop.mappingConfiguration">DROP TABLE MCSConfigurationConfiguration;</prop>
				<prop key="drop.mappingConfigurationClient">DROP TABLE MCSConfigurationClient;</prop>
				<prop key="drop.mappingConfigurationContext">DROP TABLE MCSConfigurationContext;</prop>
				<prop key="drop.mappingConfigurationType">DROP TABLE MCSConfigurationType;</prop>			
				<prop key="drop.mappingSourceConfigGroupSeq">DROP TABLE MCSSourceConfigGroupSeq;</prop>
				<prop key="drop.mappingSourceValue">DROP TABLE MCSSourceConfigValue;</prop>
				<prop key="drop.mappingTargetValue">DROP TABLE MCSTargetConfigValue;</prop>
                <!-- FileTransfer tables-->
                <prop key="drop.checksumCommand">DROP TABLE FTChecksumCommand;</prop>
                <prop key="drop.cleanupChunksCommand">DROP TABLE FTCleanupChunksCommand;</prop>
                <prop key="drop.deliverBatchCommand">DROP TABLE FTDeliverBatchCommand;</prop>
                <prop key="drop.deliverFileCommand">DROP TABLE FTDeliverFileCommand;</prop>
                <prop key="drop.fileChunk">DROP TABLE FTFileChunk;</prop>
                <prop key="drop.fileChunkHeader">DROP TABLE FTFileChunkHeader;</prop>
                <prop key="drop.fileFilter">DROP TABLE FTFileFilter;</prop>
                <prop key="drop.retrieveFileCommand">DROP TABLE FTRetrieveFileCommand;</prop>
                <prop key="drop.transactionalResourceCommand">DROP TABLE FTTransactionalResourceCommand;</prop>
                <prop key="drop.xid">DROP TABLE FTXid;</prop>
				
				<!-- Topology tables-->
				<prop key="drop.userBusinessStream">DROP TABLE UserBusinessStream;</prop>
				<prop key="drop.businessStreamFlow">DROP TABLE BusinessStreamFlow;</prop>
				<prop key="drop.businessStream">DROP TABLE BusinessStream;</prop>
				<prop key="drop.component">DROP TABLE Component;</prop>
				<prop key="drop.flow">DROP TABLE Flow;</prop>
				<prop key="drop.ikasanModule">DROP TABLE IkasanModule;</prop>
				<prop key="drop.server">DROP TABLE Server;</prop>
				
				<!-- Hospital tables-->
				<prop key="drop.exclusionEventAction">DROP TABLE ExclusionEventAction;</prop>
				
				<!-- Error categorisation tables-->
				<prop key="drop.errorCategorisationLink">DROP TABLE ErrorCategorisationLink;</prop>
				<prop key="drop.errorCategorisation">DROP TABLE ErrorCategorisation;</prop>

				<prop key="driver">net.sourceforge.jtds.jdbc.Driver</prop>
				<prop key="url">jdbc:jtds:sybase://HOSTNAME:PORT/DATABASE</prop>
				
				<!-- Error categorisation tables-->
				<prop key="create.errorCategorisationLink">CREATE TABLE ErrorCategorisationLink
					(
						Id             			NUMERIC(18, 0) 		IDENTITY NOT NULL,
						ErrorCategorisationId	NUMERIC(18, 0) NOT NULL,
						ModuleName 				VARCHAR(64) NOT NULL,
						FlowName 				VARCHAR(64) NOT NULL,
						FlowElementName 		VARCHAR(64) NOT NULL,
						Action 					VARCHAR(32) NOT NULL,
						ExceptionClass 			VARCHAR(255) NOT NULL,
						PRIMARY KEY (Id),
						FOREIGN KEY (ErrorCategorisationId) REFERENCES ErrorCategorisation(Id)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					ErrorCategorisationLink01u ON
					ErrorCategorisationLink(ModuleName,FlowName,FlowElementName, Action, ExceptionClass)</prop>
					
				<prop key="create.errorCategorisation">CREATE TABLE ErrorCategorisation
					(
						Id             			NUMERIC(18, 0) 		IDENTITY NOT NULL,
						ErrorCategory 			VARCHAR(64) NOT NULL,
						ErrorDescription	 	VARCHAR(2048) NOT NULL,
						PRIMARY KEY (Id)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1</prop>

				<prop key="create.wiretap">CREATE TABLE IkasanWiretap
					(
					Id NUMERIC IDENTITY NOT
					NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT
					NULL,
					ComponentName VARCHAR(128) NOT NULL,
					EventId VARCHAR(255) NOT
					NULL,
					RelatedEventId VARCHAR(255) NULL,
					EventTimestamp NUMERIC
					DEFAULT 0 NOT NULL,
					PayloadContent UNITEXT NOT NULL,
					CreatedDateTime
					NUMERIC NOT NULL,
					Expiry NUMERIC NOT NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX IkasanWiretap01u ON
					IkasanWiretap(Id)
				</prop>

				<prop key="create.exclusionEvent">CREATE TABLE ExclusionEvent
					(
                    Id NUMERIC IDENTITY NOT NULL,
					ModuleName VARCHAR(255) NOT NULL,
                    FlowName VARCHAR(255) NOT NULL,
                    Identifier VARCHAR(255) NOT NULL,
                    Event IMAGE NULL,
                    ErrorUri VARCHAR(255) NOT NULL,
                    Timestamp NUMERIC DEFAULT 0 NOT NULL,
					Expiry NUMERIC NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					IkasanExclusionEvent01u ON
					ExclusionEvent(Id,ModuleName,FlowName,Identifier)
				</prop>

                <prop key="create.errorOccurrence">CREATE TABLE ErrorOccurrence
                    (
                    Uri VARCHAR(255) NOT NULL,
                    ModuleName VARCHAR(255) NOT NULL,
                    FlowName VARCHAR(255) NOT NULL,
                    FlowElementName VARCHAR(255) NOT NULL,
					ErrorDetail TEXT NULL,
					ErrorMessage TEXT NULL,
					ExceptionClass VARCHAR(512) NULL,
                    EventLifeIdentifier VARCHAR(255) NULL,
                    EventRelatedIdentifier VARCHAR(255) NULL,
                    Action VARCHAR(255) NULL,
                    Event IMAGE NULL,
                    Timestamp NUMERIC DEFAULT 0 NOT NULL,
                    Expiry NUMERIC NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX
                    IkasanErrorOccurrence01u ON
                    ErrorOccurrence(ModuleName,FlowName,FlowElementName,Uri,Timestamp)
                </prop>

				<prop key="create.filter">CREATE TABLE MessageFilter
					(
					Criteria NUMERIC DEFAULT 0
					NOT NULL,
					ClientId VARCHAR(256) NOT NULL,
					CriteriaDescription
					VARCHAR(512) NULL,
					CreatedDateTime NUMERIC NOT NULL,
					Expiry NUMERIC
					NOT NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					MessageFilter01u ON MessageFilter(Criteria,ClientId)
				</prop>

				<prop key="create.version">CREATE TABLE Version
					(
					Id NUMERIC IDENTITY NOT NULL,
					Component VARCHAR(256) NOT NULL UNIQUE,
					Release VARCHAR(256) NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					CREATE UNIQUE INDEX
					IkasanVersion01u ON Version(Component)
				</prop>

				<prop key="create.version.entry">INSERT INTO Version ( Component, Release )
					VALUES (
					'ikasan', '1.0.0' )
				</prop>

				<prop key="create.flowEventTrigger">CREATE TABLE FlowEventTrigger
					(
					Id NUMERIC IDENTITY NOT
					NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT
					NULL,
					Relationship VARCHAR(32) NOT NULL,
					FlowElementName
					VARCHAR(128),
					JobName VARCHAR(64) NOT NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX FlowEventTrigger01u ON
					FlowEventTrigger(Id)
				</prop>

				<prop key="create.flowEventTriggerParameters">CREATE TABLE FlowEventTriggerParameters
					(
					TriggerId
					NUMERIC NOT NULL,
					ParamName VARCHAR(128) NOT NULL,
					ParamValue
					VARCHAR(128)
					)
					ALTER TABLE FlowEventTriggerParameters
					ADD CONSTRAINT
					FlowEventTriggerParam_Id_FK
					FOREIGN KEY (TriggerId)
					REFERENCES
					FlowEventTrigger (Id)
				</prop>

				<!-- Configuration Table creation -->
				<prop key="create.configuration">CREATE TABLE Configuration
					(
					ConfigurationId
					VARCHAR(256) NOT NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					Configuration01u ON Configuration(ConfigurationId)
				</prop>

				<prop key="create.configurationParameter">CREATE TABLE ConfigurationParameter
					(
					Id NUMERIC
					IDENTITY NOT NULL,
					ConfigurationIdentifier VARCHAR(256) NOT NULL,
					PositionRef NUMERIC,
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE
					INDEX ConfigurationParameter01u ON
					ConfigurationParameter(ConfigurationIdentifier, PositionRef)
				</prop>

				<prop key="create.confParamBoolean">CREATE TABLE ConfParamBoolean
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value BIT DEFAULT 0,
					Description
					VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamBoolean01u ON ConfParamBoolean(Id)
				</prop>

				<prop key="create.confParamInteger">CREATE TABLE ConfParamInteger
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value NUMERIC DEFAULT NULL NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamInteger01u ON
					ConfParamInteger(Id)
				</prop>

				<prop key="create.confParamList">
					CREATE TABLE ConfParamList
					(
					Id NUMERIC NOT NULL,
					Name
					VARCHAR(128) NOT NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					ConfParamList01u ON ConfParamList(Id)
				</prop>

				<prop key="create.confParamListString">
					CREATE TABLE ConfParamListString
					(
					Id NUMERIC NOT NULL,
					PositionRef NUMERIC NOT NULL,
					Value TEXT DEFAULT NULL NULL
					)
					LOCK
					DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					ConfParamListString01u ON ConfParamListString(Id,
					PositionRef)
				</prop>

				<prop key="create.confParamLong">
					CREATE TABLE ConfParamLong
					(
					Id NUMERIC NOT NULL,
					Name
					VARCHAR(128) NOT NULL,
					Value NUMERIC DEFAULT NULL NULL,
					Description
					VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamLong01u ON ConfParamLong(Id)
				</prop>

				<prop key="create.confParamMap">
					CREATE TABLE ConfParamMap
					(
					Id NUMERIC NOT NULL,
					Name
					VARCHAR(128) NOT NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamMap01u
					ON ConfParamMap(Id)
				</prop>

				<prop key="create.confParamMapString">
					CREATE TABLE ConfParamMapString
					(
					Id NUMERIC NOT NULL,
					MapKey VARCHAR(256) NOT NULL,
					Value TEXT DEFAULT NULL NULL
					)
					LOCK
					DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					ConfParamMapString01u ON ConfParamMapString(Id,
					MapKey)
				</prop>

				<prop key="create.confParamString">
					CREATE TABLE ConfParamString
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value TEXT DEFAULT NULL NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamString01u ON
					ConfParamString(Id)
				</prop>
				
				<prop key="create.confParamMaskedString">
					CREATE TABLE ConfParamMaskedString
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value TEXT DEFAULT NULL NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX ConfParamMaskedString01u ON
					ConfParamMaskedString(Id)
				</prop>


				<prop key="create.systemEvent">CREATE TABLE SystemEvent
					(
					Id NUMERIC IDENTITY NOT
					NULL,
					Subject VARCHAR(128) NOT NULL,
					Action VARCHAR(512) NOT NULL,
					Actor VARCHAR(64) NULL,
					Timestamp DATETIME NOT NULL,
					Expiry DATETIME
					NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					SystemEvent01u ON SystemEvent(Id)
				</prop>

				<prop key="create.moduleStartup">CREATE TABLE StartupControl
					(
					Id NUMERIC IDENTITY NOT
					NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT
					NULL,
					StartupType VARCHAR(16) NOT NULL,
					Comment VARCHAR(256) NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1

					CREATE UNIQUE INDEX
					StartupControl01u ON StartupControl(Id)
				</prop>

				<prop key="create.consoleModule">CREATE TABLE Module(
					Id NUMERIC IDENTITY NOT NULL
					PRIMARY KEY,
					Name VARCHAR(255) NOT NULL,
					Description VARCHAR(255) NOT
					NULL,
					DesignDiagramURL VARCHAR(255) NULL,
					UNIQUE (Name)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.consolePointToPointFlowProfile">CREATE TABLE PointToPointFlowProfile(
					Id NUMERIC
					IDENTITY NOT NULL PRIMARY KEY,
					Name VARCHAR(255) NOT NULL
					)
					LOCK
					DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.consolePointToPointFlow">CREATE TABLE PointToPointFlow(
					Id NUMERIC IDENTITY NOT
					NULL PRIMARY KEY,
					PointToPointFlowProfileId NUMERIC NOT NULL,
					FromModuleId NUMERIC NULL,
					ToModuleId NUMERIC NULL,
					CONSTRAINT
					PTPP_ID_FK FOREIGN KEY(PointToPointFlowProfileId) REFERENCES
					PointToPointFlowProfile(Id)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>

				<prop key="create.users">CREATE TABLE Users
					(
					Id 					NUMERIC IDENTITY NOT NULL PRIMARY KEY,
					Username 			VARCHAR(50) NOT NULL UNIQUE,
					Password			VARCHAR(50) NOT NULL,
					Email 				VARCHAR(255) NULL,
					FirstName			VARCHAR(50) NULL,
					Surname				VARCHAR(50) NULL,
					Department			VARCHAR(50) NULL,
					Enabled 			BIT NOT NULL,
					PreviousAccess 		NUMERIC DEFAULT 0 NOT NULL
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.authorities">CREATE TABLE Authorities
					(
					Id NUMERIC IDENTITY NOT NULL
					PRIMARY KEY,
					Authority VARCHAR(50) NOT NULL UNIQUE,
					Description
					VARCHAR(512)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.usersAuthorities">CREATE TABLE UsersAuthorities
					(
					UserId NUMERIC NOT
					NULL,
					AuthorityId NUMERIC NOT NULL,
					PRIMARY KEY (UserId,AuthorityId),
					CONSTRAINT USER_AUTH_USER_FK FOREIGN KEY(UserId) REFERENCES
					Users(Id),
					CONSTRAINT USER_AUTH_AUTH_FK FOREIGN KEY(AuthorityId)
					REFERENCES
					Authorities(Id)
					)
				</prop>
				<prop key="create.defaultAuthorities">INSERT INTO Authorities ( Authority, Description )
					VALUES ( 'ROLE_USER', 'Users who may log into the system' )
					INSERT
					INTO Authorities ( Authority, Description )
					VALUES ( 'ROLE_ADMIN',
					'Users who may perform administration functions on
					the system' )
				</prop>

				<prop key="create.defaultAdminUser">declare @authorityUserId numeric(18),
					@authorityAdminId numeric(18), @username varchar(50), @userId
					numeric(18)

					select @authorityUserId = Id from Authorities where
					Authority =
					'ROLE_USER'
					select @authorityAdminId = Id from
					Authorities where Authority =
					'ROLE_ADMIN'

					select @username = 'admin'

					INSERT INTO Users ( Username, Password, Enabled, FirstName, Surname )
					VALUES (
					@username, 'd033e22ae348aeb5660fc2140aec35850c4da997', 1 , 'Admin', 'User')
					select
					@userId = Id from Users where Username = @username

					INSERT INTO
					UsersAuthorities values ( @userId, @authorityUserId )
					INSERT INTO
					UsersAuthorities values ( @userId, @authorityAdminId )
				</prop>
				<prop key="find.anyAdminUser">SELECT * FROM UsersAuthorities</prop>
				<prop key="find.usersTableExists">SELECT * from Users</prop>
				
				
				<!--  Tables required for the security module -->
				<prop key="create.securityPrincipal">CREATE TABLE SecurityPrincipal
					(
					   Id               	NUMERIC(18, 0) 		   IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		   UNIQUE NOT NULL,
					   PrincipalType		VARCHAR(256)		    NOT NULL,
					   Description			VARCHAR(1024)		    NOT NULL,
					   CreatedDateTime      DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX Principal_Name ON SecurityPrincipal(Name)
					CREATE NONCLUSTERED INDEX Principal_Type ON SecurityPrincipal(PrincipalType)
				</prop>
				<prop key="create.securityRole">CREATE TABLE SecurityRole
					(
					   Id               	NUMERIC(18, 0) 		       IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		       UNIQUE NOT NULL,
					   Description	     	VARCHAR(1024)		   	   NOT NULL,
					   CreatedDateTime      DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX Role_Name ON SecurityRole(Name)
				</prop>
				<prop key="create.securityPolicy">CREATE TABLE SecurityPolicy
					(
					   Id               				NUMERIC(18, 0) IDENTITY NOT NULL,
					   PolicyLinkId               		NUMERIC(18, 0) NULL,
					   Name		      					VARCHAR(256) UNIQUE NOT NULL,
					   Description	     				VARCHAR(1024)		   	   NOT NULL,
					   CreatedDateTime      			DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      			DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (PolicyLinkId) REFERENCES PolicyLink(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX Policy_Name ON SecurityPolicy(Name)
				</prop>
				<prop key="create.userPrincipal">CREATE TABLE UserPrincipal
					(
					   UserId         				NUMERIC(18, 0) NOT NULL,
					   PrincipalId               	NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (UserId, PrincipalId), -- clustered index on Id
					   FOREIGN KEY (PrincipalId) REFERENCES SecurityPrincipal(Id),
					   FOREIGN KEY (UserId) REFERENCES Users(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.principalRole">CREATE TABLE PrincipalRole
					(
					   PrincipalId               	NUMERIC(18, 0) NOT NULL,
					   RoleId         				NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (PrincipalId, RoleId), -- clustered index on Id
					   FOREIGN KEY (PrincipalId) REFERENCES SecurityPrincipal(Id),
					   FOREIGN KEY (RoleId) REFERENCES SecurityRole(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.rolePolicy">CREATE TABLE RolePolicy
					(
					   RoleId               	    NUMERIC(18, 0) NOT NULL,
					   PolicyId               	    NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (RoleId, PolicyId), -- clustered index on Id
					   FOREIGN KEY (PolicyId) REFERENCES SecurityPolicy(Id),
					   FOREIGN KEY (RoleId) REFERENCES SecurityRole(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.policyLinkType">CREATE TABLE PolicyLinkType
					(
					   Id             				NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) UNIQUE NOT NULL,
					   TableName		      		VARCHAR(256) UNIQUE NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.policyLink">CREATE TABLE PolicyLink
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   PolicyLinkTypeId     		NUMERIC(18, 0) NOT NULL,
					   TargetId         			NUMERIC(18, 0) NOT NULL,
					   Name				      		VARCHAR(256) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (PolicyLinkTypeId) REFERENCES PolicyLinkType(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>				
				<prop key="create.authenticationMethod">CREATE TABLE AuthenticationMethod
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name    		          		VARCHAR(128) NOT NULL,
					   Method    		          	VARCHAR(128) NOT NULL,
					   AuthOrder					NUMERIC(18,0) NOT NULL,
					   LastSynchronised      		DATETIME NULL,
					   Enabled      				BIT DEFAULT 1,
					   LdapServerUrl    		  	VARCHAR(256) NULL,
					   LdapBindUserDn		      	VARCHAR(256) NULL,
					   LdapBindUserPassword   		VARCHAR(256) NULL,
					   LdapUserSearchBaseDn   		VARCHAR(256) NULL,
					   LdapUserSearchFilter   		VARCHAR(256) NULL,
					   EmailAttributeName 			VARCHAR(256) NULL,
					   UserAccNameAttributeName 	VARCHAR(256) NULL,
					   AccountTypeAttributeName   	VARCHAR(256) NULL,
					   AppSecBaseDn   				VARCHAR(256) NULL,
					   AppSecGroupAttributeName 	VARCHAR(256) NULL,
					   FirstNameAttributeName 		VARCHAR(256) NULL,
					   SurnameAttributeName 		VARCHAR(256) NULL,
					   DepartmentAttributeName	 	VARCHAR(256) NULL,
					   AppSecDescAttributeName		VARCHAR(256) NULL,
					   LdapUserDescAttributeName	VARCHAR(256) NULL,
					   MemberofAttributeName		VARCHAR(256) NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>

				<!--  Topology Service Tables -->
                <prop key="create.server">CREATE TABLE Server
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 		UNIQUE NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   Url		      				VARCHAR(256) 		NOT NULL,
					   Port							NUMERIC(18, 0) 		NOT NULL,
					   CreatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.ikasanModule">CREATE TABLE IkasanModule
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 		UNIQUE NOT NULL,
					   ContextRoot     				VARCHAR(256) 		NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   DiagramUrl      				VARCHAR(256) 		NULL,
					   Version      				VARCHAR(256) 		NULL,
					   ServerId						NUMERIC(18, 0) 		NULL,
					   CreatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					)
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.flow">CREATE TABLE Flow
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 	    NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   ModuleId						NUMERIC(18, 0) 		NULL,
					   CreatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.component">CREATE TABLE Component
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 	    NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   IsConfigurable 				BIT DEFAULT 0,
					   FlowId						NUMERIC(18, 0) 		NULL,
					   ComponentOrder				NUMERIC(18, 0) 		NULL,
					   ConfigurationId				VARCHAR(256) 		NULL,
					   CreatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME 			default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.businessStream">CREATE TABLE BusinessStream
					(
					   Id             				NUMERIC(18, 0) 	IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 	UNIQUE NOT NULL,
					   Description		      		VARCHAR(1024) 	NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.businessStreamFlow">CREATE TABLE BusinessStreamFlow
					(
					   BusinessStreamId				NUMERIC(18, 0) 	NOT NULL,
					   FlowId						NUMERIC(18, 0) 	NOT NULL,
					   FlowOrder					NUMERIC(18, 0) 	NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (BusinessStreamId, FlowId),
					   FOREIGN KEY (BusinessStreamId) REFERENCES BusinessStream(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <prop key="create.userBusinessStream">CREATE TABLE UserBusinessStream
					(
					   UserId						NUMERIC(18, 0) 	NOT NULL,
					   BusinessStreamId				NUMERIC(18, 0) 	NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (UserId, BusinessStreamId),
					   FOREIGN KEY (UserId) REFERENCES Users(Id),
					   FOREIGN KEY (BusinessStreamId) REFERENCES BusinessStream(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
                </prop>
                
                <!--  Hospital Service Tables -->
                <prop key="create.exclusionEventAction">CREATE TABLE ExclusionEventAction
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   ErrorUri	      				VARCHAR(256) 		UNIQUE NOT NULL,
					   ModuleName		      		VARCHAR(256) 		NOT NULL,
					   FlowName		      			VARCHAR(256) 		NOT NULL,
					   ActionedBy		      		VARCHAR(256) 		NOT NULL,
					   Action		      			VARCHAR(32) 		NOT NULL,
					   Event		      			IMAGE 				NOT NULL,
					   Timestamp		      		NUMERIC(18, 0) 		NOT NULL,
					   PRIMARY KEY (Id)
					) 
					
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX ExclEventAction_ErrorUri ON ExclusionEventAction(ErrorUri)
                </prop>

				<prop key="create.defaultPrincipal">declare @securityPrincipalId numeric(18),
					@securityRoleId numeric(18), @securityPolicyId numeric(18), @userId numeric(18)
					
					INSERT INTO 
					SecurityPrincipal ( Name, PrincipalType, Description )
					VALUES ( 'admin', 'user', 'This administrator user')
					
					
					select @securityPrincipalId = Id 
					from SecurityPrincipal 
					where Name = 'admin'
					
					select @userId = Id from Users where Username = 'admin'
					
					INSERT
					INTO UserPrincipal ( UserId, PrincipalId )
					VALUES ( @userId, @securityPrincipalId )
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'Administrators',
					'Users who may perform administration functions on
					the system' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'Administrators'
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'ALL', 'Policy to do everything' )
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'ALL'
					
					INSERT
					INTO PrincipalRole ( PrincipalId, RoleId )
					VALUES ( @securityPrincipalId, @securityRoleId )
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'ALL'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'User',
					'Users who have a read only view on the system' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'User'
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'Read Only', 'Read only policy' )
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'Read Only'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'COP Stream Administrator',
					'Cash Operations Stream Administrators' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'COP Stream Administrator'
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'Read Only'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Control', 'Ability to control COP flows' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Control'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Wiretap', 'Ability to view COP wiretaps' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Wiretap'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Errors', 'View COP errors' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Errors'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Replay', 'Policy to replay COP data' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Replay'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Hospital', 'Policy to use the hospital for COP data' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Hospital'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'COP Stream User',
					'Cash Operations Stream User' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'COP Stream User'
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Wiretap'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Errors'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					INSERT
					INTO PolicyLinkType ( Name, TableName )
					VALUES ( 'Mapping Configuration',  'MCSMappingConfiguration' )
					
				</prop>
				
				<!-- Tables required for the ikasan mapping module -->
				<prop key="create.mappingConfigurationType">CREATE TABLE MCSConfigurationType
					(
					   Id               	NUMERIC(18, 0) 		   IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		   UNIQUE NOT NULL,
					   CreatedDateTime      DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.mappingConfigurationContext">CREATE TABLE MCSConfigurationContext
					(
					   Id               	NUMERIC(18, 0) 		   IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		   UNIQUE NOT NULL,
					   Description	      	VARCHAR(1024)		   NOT NULL,
					   CreatedDateTime      DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.mappingConfigurationClient">CREATE TABLE MCSConfigServiceClient
					(
					   Id               				NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name		      			VARCHAR(256) UNIQUE NOT NULL,
					   KeyLocationQueryProcessorType		VARCHAR(256) NOT NULL,
					   CreatedDateTime      			DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      			DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX ConfigServiceClient_Name ON MCSConfigServiceClient(Name)
				</prop>
				<prop key="create.mappingConfiguration">CREATE TABLE MCSMappingConfiguration
					(
					   Id               	  		NUMERIC(18, 0) IDENTITY NOT NULL,
					   SourceContextId         		NUMERIC(18, 0) NOT NULL,
					   TargetContextId         		NUMERIC(18, 0) NOT NULL,
					   NumberOfParams       		NUMERIC(18, 0) NOT NULL,
					   Description         			VARCHAR(1024) NOT NULL,
					   ConfigurationTypeId  		NUMERIC(18, 0) NOT NULL,
					   ConfigurationServiceClientId  	NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (ConfigurationTypeId) REFERENCES MCSConfigurationType(Id),
					   FOREIGN KEY (ConfigurationServiceClientId) REFERENCES MCSConfigServiceClient(Id),
					   FOREIGN KEY (SourceContextId) REFERENCES MCSConfigurationContext(Id),
					   FOREIGN KEY (TargetContextId) REFERENCES MCSConfigurationContext(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					-- This is for StateModelHistory state model id searches
					CREATE NONCLUSTERED INDEX MappingConfig_ConfigTypeId ON MCSMappingConfiguration(ConfigurationTypeId)
					CREATE UNIQUE INDEX MappingConfig_unique ON MCSMappingConfiguration(ConfigurationServiceClientId, SourceContextId, TargetContextId, ConfigurationTypeId)
				</prop>
				<prop key="create.mappingTargetValue">CREATE TABLE MCSTargetConfigValue
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   TargetSystemValue    		VARCHAR(256) NOT NULL,   
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>
				<prop key="create.mappingSourceValue">CREATE TABLE MCSSourceConfigValue
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   SourceSystemValue    		VARCHAR(256) NOT NULL,
					   MappingConfigurationId		NUMERIC(18, 0) NOT NULL,
					   TargetConfigurationValueId   NUMERIC(18, 0) NOT NULL,
					   SourceConfigGroupId          NUMERIC(18, 0) NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (MappingConfigurationId) REFERENCES MCSMappingConfiguration(Id),
					   FOREIGN KEY (TargetConfigurationValueId) REFERENCES MCSTargetConfigValue(Id)
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX SrcConfigValue_ConfigContextId ON MCSSourceConfigValue(MappingConfigurationId)
					CREATE NONCLUSTERED INDEX SrcConfig_TgtSysConfigValueId ON MCSSourceConfigValue(TargetConfigurationValueId)
				</prop>
				<prop key="create.mappingKeyLocationQuery">CREATE TABLE MCSKeyLocationQuery
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   Value			    		VARCHAR(256) NOT NULL,
					   MappingConfigurationId    		NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id
					   FOREIGN KEY (MappingConfigurationId) REFERENCES MCSMappingConfiguration(Id),
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
					
					CREATE NONCLUSTERED INDEX MCSKeyLocQuery_mappingConfId ON MCSKeyLocationQuery(MappingConfigurationId)
				</prop>
				<prop key="create.mappingSourceConfigGroupSeq">CREATE TABLE MCSSourceConfigGroupSeq
					(
					   Id               NUMERIC(18, 0) IDENTITY NOT NULL,
					   SequenceNumber   NUMERIC(20, 0) NULL,
					   PRIMARY KEY (Id) -- clustered index on Id
					)
					
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
										
					SET IDENTITY_INSERT MCSSourceConfigGroupSeq ON
					insert into MCSSourceConfigGroupSeq (
					   Id
					  ,SequenceNumber
					) VALUES (
					   1
					  ,100)
				   SET IDENTITY_INSERT MCSSourceConfigGroupSeq OFF
				</prop>

                <prop key="create.checksumCommand">CREATE TABLE FTChecksumCommand
                    (
                    Id                   numeric(18,0),
                    Destructive          bit NOT NULL,
                    ChecksumFilePath     varchar(255) NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTChecksumCommand01u
                    ON FTChecksumCommand(Id)
                </prop>

                <prop key="create.cleanupChunksCommand">CREATE TABLE FTCleanupChunksCommand
                    (
                    Id                  numeric(18,0),
                    FileChunkHeaderId   numeric(18,0) NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTCleanupChunksCommand01u
                    ON FTCleanupChunksCommand(Id)
                </prop>

                <prop key="create.deliverBatchCommand">CREATE TABLE FTDeliverBatchCommand
                    (
                    Id                     numeric(18,0),
                    OutputDirectory        varchar(255) NULL,
                    TempDirectory          varchar(255) NULL,
                    BatchFolder            varchar(255) NULL,
                    PutAttempted           bit NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTDeliverBatchCommand01u
                    ON FTDeliverBatchCommand(Id)
                </prop>


                <prop key="create.deliverFileCommand">CREATE TABLE FTDeliverFileCommand
                    (
                    Id                     numeric(18,0),
                    FileName               varchar(255) NULL,
                    TempFileName           varchar(255) NULL,
                    OutputDirectory        varchar(255) NULL,
                    OverwriteExisting      bit NOT NULL,
                    PutAttempted           bit NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTDeliverFileCommand01u
                    ON FTDeliverFileCommand(Id)
                </prop>


                <prop key="create.fileChunkHeader">CREATE TABLE FTFileChunkHeader
                    (
                    Id              numeric(18,0) IDENTITY,
                    SequenceLength  numeric(18,0) NOT NULL,
                    InternalMd5Hash  char(32) NULL,
                    ExternalMd5Hash  char(32) NULL,
                    FileName        varchar(255) NOT NULL,
                    ChunkTimeStamp  numeric(18,0) NOT NULL,
                    ClientId  varchar(255) NULL

                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTFileChunkHeader01u
                    ON FTFileChunkHeader(Id)
                </prop>

                <prop key="create.fileChunk">CREATE TABLE FTFileChunk
                    (
                    Id              numeric(18,0) IDENTITY,
                    Content         image  NOT NULL,
                    Ordinal         numeric(18,0) NOT NULL,
                    Md5Hash  		char(32) NULL,
                    FileChunkHeaderId numeric(18,0) NOT NULL references FTFileChunkHeader(Id)

                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTFileChunk01u
                    ON FTFileChunk(Id)
                </prop>

                <prop key="create.fileFilter">CREATE TABLE FTFileFilter
                    (
                    Id              numeric(18,0) IDENTITY,
                    ClientId        varchar(255)  NOT NULL,
                    Criteria        varchar(512)  NOT NULL,
                    LastModified    datetime      NOT NULL,
                    LastAccessed    datetime      NOT NULL,
                    Size            numeric(18,0) NOT NULL,
                    CreatedDateTime numeric(18, 0) NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTFileFilter01u
                    ON FTFileFilter(Id)

                    CREATE UNIQUE INDEX FTFileFilter02u
                    ON FTFileFilter(ClientId,Criteria,LastModified,Size)

                    CREATE INDEX FTFileFilter03u
                    ON FTFileFilter(ClientId,CreatedDateTime)
                </prop>

                <prop key="create.retrieveFileCommand">CREATE TABLE FTRetrieveFileCommand
                    (
                    Id                   numeric(18,0),
                    Destructive          bit NOT NULL,
                    RenameOnSuccess      bit NOT NULL,
                    RenameExtension      varchar(255) NULL,
                    MoveOnSuccess        bit NOT NULL,
                    MoveNewPath          varchar(255) NULL,
                    SourcePath           varchar(255) NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTRetrieveFileCommand01u
                    ON FTRetrieveFileCommand(Id)
                </prop>

                <prop key="create.xid">CREATE TABLE FTXid
                    (
                    Id              numeric(18,0) IDENTITY,
                    State           varchar(255)  NOT NULL,
                    GlobalTransactionId      varchar(255)  NOT NULL,
                    BranchQualifier          varchar (255)  NOT NULL,
                    FormatId          numeric(18,0)  NOT NULL,
                    ClientId           varchar(255)  NOT NULL,
                    CreatedDateTime  numeric(18,0) NOT NULL,
                    LastUpdatedDateTime  numeric(18,0) NOT NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX FTXid01u
                    ON FTXid(Id)

                    CREATE UNIQUE INDEX FTXid02u
                    ON FTXid(GlobalTransactionId, BranchQualifier)
                </prop>

                <prop key="create.transactionalResourceCommand">CREATE TABLE FTTransactionalResourceCommand
                    (
                    Id              numeric(18,0) IDENTITY,
                    State           varchar(255)  NOT NULL,
                    Xid_Id numeric(18,0) NOT NULL references FTXid(Id),
                    Type           varchar(255)  NOT NULL,
                    ExecutionTimestamp char(24) NULL
                    )
                    LOCK DATAROWS
                    WITH IDENTITY_GAP=1

                    CREATE UNIQUE INDEX TransResCommand01u
                    ON FTTransactionalResourceCommand(Id)
                </prop>
				
				<prop key="create.platformConfiguration">CREATE TABLE PlatformConfiguration
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name			    			VARCHAR(256) NOT NULL,
					   Value			    		VARCHAR(256) NOT NULL,
					   CreatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   UpdatedDateTime      		DATETIME default ${getDate} NOT NULL,
					   PRIMARY KEY (Id), -- clustered index on Id,
					) 
					LOCK DATAROWS
					WITH IDENTITY_GAP=1
				</prop>

			</props>

		</property>
	</bean>

	<bean id="MySQL"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="singleton" value="true" />

		<property name="properties">
			<props>
				<prop key="create.wiretap">CREATE TABLE IkasanWiretap
					(
					Id NUMERIC IDENTITY NOT
					NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT
					NULL,
					ComponentName VARCHAR(128) NOT NULL,
					EventId VARCHAR(255) NOT
					NULL,
					RelatedEventId VARCHAR(255) NULL,
					EventTimestamp NUMERIC
					DEFAULT 0 NOT NULL,
					PayloadContent TEXT NOT NULL,
					CreatedDateTime
					NUMERIC NOT NULL,
					Expiry NUMERIC NOT NULL
					)
					LOCK DATAROWS
					WITH
					IDENTITY_GAP=1

					CREATE UNIQUE INDEX IkasanWiretap01u ON
					IkasanWiretap(Id)
				</prop>
			</props>
		</property>
	</bean>

	<bean id="SQLServer2008"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="singleton" value="true" />

		<property name="properties">
			<props>
                <prop key="drop.usersAuthorities">DROP TABLE UsersAuthorities;</prop>
                <prop key="drop.authorities">DROP TABLE Authorities;</prop>
                <prop key="drop.users">DROP TABLE Users;</prop>
                <prop key="drop.consolePointToPointFlow">DROP TABLE PointToPointFlow</prop>
                <prop key="drop.consolePointToPointFlowProfile">DROP TABLE PointToPointFlowProfile;</prop>
                <prop key="drop.consoleModule">DROP TABLE Module;</prop>
                <prop key="drop.moduleStartup">DROP TABLE StartupControl;</prop>
                <prop key="drop.systemEvent">DROP TABLE SystemEVent;</prop>
                <prop key="drop.confParamString">DROP TABLE ConfParamString;</prop>
                <prop key="drop.confParamMaskedString">DROP TABLE ConfParamMaskedString;</prop>
                <prop key="drop.confParamMapString">DROP TABLE ConfParamMapString;</prop>
                <prop key="drop.confParamMap">DROP TABLE ConfParamMap;</prop>
                <prop key="drop.confParamLong">DROP TABLE ConfParamLong;</prop>
                <prop key="drop.confParamListString">DROP TABLE ConfParamListString;</prop>
                <prop key="drop.confParamList">DROP TABLE ConfParamList;</prop>
                <prop key="drop.confParamInteger">DROP TABLE ConfParamInteger;</prop>
                <prop key="drop.confParamBoolean">DROP TABLE ConfParamBoolean;</prop>
                <prop key="drop.configurationParameter">DROP TABLE ConfigurationParameter;</prop>
                <prop key="drop.configuration">DROP TABLE Configuration;</prop>
                <prop key="drop.flowEventTriggerParameters">DROP TABLE FlowEventTriggerParameters;</prop>
                <prop key="drop.flowEVentTrigger">DROP TABLE FlowEventTrigger;</prop>
                <prop key="drop.version">DROP TABLE Version;</prop>
                <prop key="drop.exclusionEvent">DROP TABLE ExclusionEvent;</prop>
                <prop key="drop.errorOccurrence">DROP TABLE ErrorOccurrence;</prop>
                <prop key="drop.filter">DROP TABLE MessageFilter;</prop>
                <prop key="drop.wiretap">DROP TABLE IkasanWiretap;</prop>
                <prop key="drop.rolePolicy">DROP TABLE RolePolicy;</prop>
				<prop key="drop.principalRole">DROP TABLE PrincipalRole;</prop>
				<prop key="drop.securityPolicy">DROP TABLE SecurityPolicy;</prop>
				<prop key="drop.securityPolicy">DROP TABLE SecurityRole;</prop>
				<prop key="drop.securityPrincipal">DROP TABLE SecurityPrincipal;</prop>
				<prop key="drop.keyLocationQuery">DROP TABLE MCSKeyLocationQuery;</prop>
				<prop key="drop.mappingConfiguration">DROP TABLE MCSConfigurationConfiguration;</prop>
				<prop key="drop.mappingConfigurationClient">DROP TABLE MCSConfigurationClient;</prop>
				<prop key="drop.mappingConfigurationContext">DROP TABLE MCSConfigurationContext;</prop>
				<prop key="drop.mappingConfigurationType">DROP TABLE MCSConfigurationType;</prop>			
				<prop key="drop.mappingSourceConfigGroupSeq">DROP TABLE MCSSourceConfigGroupSeq;</prop>
				<prop key="drop.mappingSourceValue">DROP TABLE MCSSourceConfigValue;</prop>
				<prop key="drop.mappingTargetValue">DROP TABLE MCSTargetConfigValue;</prop>
                <!-- FileTransfer tables-->
                <prop key="drop.checksumCommand">DROP TABLE FTChecksumCommand;</prop>
                <prop key="drop.cleanupChunksCommand">DROP TABLE FTCleanupChunksCommand;</prop>
                <prop key="drop.deliverBatchCommand">DROP TABLE FTDeliverBatchCommand;</prop>
                <prop key="drop.deliverFileCommand">DROP TABLE FTDeliverFileCommand;</prop>
                <prop key="drop.fileChunk">DROP TABLE FTFileChunk;</prop>
                <prop key="drop.fileChunkHeader">DROP TABLE FTFileChunkHeader;</prop>
                <prop key="drop.fileFilter">DROP TABLE FTFileFilter;</prop>
                <prop key="drop.retrieveFileCommand">DROP TABLE FTRetrieveFileCommand;</prop>
                <prop key="drop.transactionalResourceCommand">DROP TABLE FTTransactionalResourceCommand;</prop>
                <prop key="drop.xid">DROP TABLE FTXid;</prop>
				
				<!-- Topology tables-->
				<prop key="drop.userBusinessStream">DROP TABLE UserBusinessStream;</prop>
				<prop key="drop.businessStreamFlow">DROP TABLE BusinessStreamFlow;</prop>
				<prop key="drop.businessStream">DROP TABLE BusinessStream;</prop>
				<prop key="drop.component">DROP TABLE Component;</prop>
				<prop key="drop.flow">DROP TABLE Flow;</prop>
				<prop key="drop.ikasanModule">DROP TABLE IkasanModule;</prop>
				<prop key="drop.server">DROP TABLE Server;</prop>
				
				<!-- Hospital tables-->
				<prop key="drop.exclusionEventAction">DROP TABLE ExclusionEventAction;</prop>
				
				<!-- Error categorisation tables-->
				<prop key="drop.errorCategorisationLink">DROP TABLE ErrorCategorisationLink;</prop>
				<prop key="drop.errorCategorisation">DROP TABLE ErrorCategorisation;</prop>

                <prop key="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</prop>
                <prop key="url">jdbc:sqlserver://HOSTNAME:PORT/DATABASE</prop>
				
				<!-- Error categorisation tables-->
				<prop key="create.errorCategorisationLink">CREATE TABLE ErrorCategorisationLink
					(
						[Id]             			[NUMERIC](18) 		IDENTITY NOT NULL,
						[ErrorCategorisationId]		[NUMERIC](18) 		NOT NULL,
						[ModuleName] 				[VARCHAR](64) 		NOT NULL,
						[FlowName] 					[VARCHAR](64) 		NOT NULL,
						[FlowElementName] 			[VARCHAR](64) 		NOT NULL,
						[Action]					[VARCHAR](32) 		NOT NULL,
						[ExceptionClass] 			[VARCHAR](255) 		NOT NULL,
						CONSTRAINT                  [PK_ErrorCategorisationLink_Id] PRIMARY KEY CLUSTERED
						(
						[Id] ASC
						),
						CONSTRAINT [FK_ErrorCategorisationLink_ErrorCategorisationId] FOREIGN KEY (ErrorCategorisationId) REFERENCES ErrorCategorisation(Id)
					)

					CREATE UNIQUE INDEX [IX_Error_Categorisation_Unique] ON [ErrorCategorisationLink](ModuleName, FlowName, FlowElementName, Action, ExceptionClass)
					</prop>
					
				<prop key="create.errorCategorisation">CREATE TABLE [ErrorCategorisation]
					(
						[Id]            		[NUMERIC](18) 		IDENTITY NOT NULL,
						[ErrorCategory] 		[VARCHAR](64) 		NOT NULL,
						[ErrorDescription]	 	[VARCHAR](2048) 	NOT NULL,
						CONSTRAINT              [PK_ErrorCategorisation_Id] PRIMARY KEY CLUSTERED
						(
						[Id] ASC
						)
					)
					</prop>


                <prop key="create.wiretap">CREATE TABLE [IkasanWiretap]
                    (
                    [Id]                    [numeric](18)  IDENTITY NOT NULL,
                    [ModuleName]            [varchar](128) NOT NULL,
                    [FlowName]              [varchar](128) NOT NULL,
                    [ComponentName]         [varchar](128) NOT NULL,
                    [EventId]               [varchar](255) NOT NULL,
                    [RelatedEventId]        [varchar](255),
                    [EventTimestamp]        [numeric] DEFAULT 0 NOT NULL,
                    [PayloadContent]        [varchar] (max),
                    [CreatedDateTime]       [numeric] NOT NULL,
                    [Expiry]                [numeric] NOT NULL,
                    CONSTRAINT              [PK_IkasanWiretap_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    )
                    )

                    CREATE NONCLUSTERED INDEX [IX_IkasanWiretap_EventId] ON [IkasanWiretap] (EventId)
                </prop>

                <prop key="create.exclusionEvent">CREATE TABLE [ExclusionEvent]
                    (
                    [Id]                    [numeric](18)  IDENTITY NOT NULL,
                    [ModuleName]            [varchar](255) NOT NULL,
                    [FlowName]              [varchar](255) NOT NULL,
                    [Identifier]   			[varchar](255) NOT NULL,
                    [Event]                 [varbinary] (max) NULL,
                    [ErrorUri]              [varchar](255) NOT NULL,
                    [Timestamp]             [numeric] DEFAULT 0 NOT NULL,
					[Expiry]                [numeric] NULL,
                    CONSTRAINT              [PK_ExclusionEvent_Module_Flow_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id],[ModuleName],[FlowName],[Identifier] ASC
                    )
                    )
                </prop>
					
                <prop key="create.errorOccurrence">CREATE TABLE [ErrorOccurrence]
                    (
                    [Uri]                   [varchar](255) NOT NULL,
                    [ModuleName]            [varchar](255) NOT NULL,
                    [FlowName]              [varchar](255) NOT NULL,
                    [FlowElementName]     	[varchar](255) NOT NULL,
					[ErrorDetail]           [text] NULL,
					[ErrorMessage]          [text] NULL,
					[ExceptionClass] 		[varchar](512) NULL,
                    [EventLifeIdentifier]   [varchar](255) NULL,
                    [EventRelatedIdentifier] [varchar](255) NULL,
                    [Action]                [varchar](255) NULL,
					[Event]                 [varbinary] (max) NULL,
                    [Timestamp]             [numeric] DEFAULT 0 NOT NULL,
                    [Expiry]                [numeric] NOT NULL,
                    CONSTRAINT              [PK_ErrorOccurrence_Module_Flow_Uri] PRIMARY KEY CLUSTERED
                    (
                    [ModuleName],[FlowName],[FlowElementName],[Uri],[Timestamp] ASC
                    )
                    )
                </prop>

                <prop key="create.filter">CREATE TABLE [MessageFilter]
                    (
                    [Criteria]              [numeric](18) NOT NULL,
                    [ClientId]              [varchar](256) NOT NULL,
                    [CriteriaDescription]   [varchar](512) NULL,
                    [CreatedDateTime]       [numeric] (18) NOT NULL,
                    [Expiry]                [numeric] (18) NOT NULL,
                    CONSTRAINT              [PK_ClientId_Criteria] PRIMARY KEY CLUSTERED
                    (
                    [Criteria],[ClientId] ASC
                    )
                    )
                </prop>

                <prop key="create.version">CREATE TABLE [Version]
                    (
                    [Id]                    [numeric](18)  IDENTITY NOT NULL,
                    [Component]             [varchar](256) NOT NULL UNIQUE,
                    [Release]               [varchar](256) NULL,
                    CONSTRAINT              [PK_Version_Component] PRIMARY KEY CLUSTERED
                    (
                    [Component] ASC
                    )
                    )
                </prop>

                <prop key="create.version.entry">INSERT INTO Version ( Component, Release )
                    VALUES (
                    'ikasan', '1.0.0' )
                </prop>

                <prop key="create.flowEventTrigger">CREATE TABLE [FlowEventTrigger]
                    (
                    [Id]                    [numeric](18)  IDENTITY NOT NULL,
                    [ModuleName]            [varchar](128) NOT NULL,
                    [FlowName]              [varchar](128) NOT NULL,
                    [Relationship]          [varchar](32)  NOT NULL,
                    [FlowElementName]       [varchar](128),
                    [JobName]               [varchar](64)  NOT NULL,
                    CONSTRAINT              [PK_FlowEventTrigger_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    )
                    )
                </prop>

                <prop key="create.flowEventTriggerParameters">CREATE TABLE [FlowEventTriggerParameters]
                    (
                    [TriggerId]             [numeric](18) NOT NULL,
                    [ParamName]             [varchar](128) NOT NULL,
                    [ParamValue]            [varchar](128) NULL,
                    CONSTRAINT [FK_FlowEventTriggerParameters_TriggerId] FOREIGN KEY (TriggerId) REFERENCES FlowEventTrigger(Id)
                    )
                </prop>

                <!-- Configuration Table creation -->
                <prop key="create.configuration">CREATE TABLE [Configuration]
                    (
                    [ConfigurationId]         [varchar](256) NOT NULL,
                    [Description]             [varchar](256) DEFAULT NULL NULL
                    )

                    CREATE UNIQUE INDEX [IX_Configuration_ConfigurationId] ON [Configuration](ConfigurationId)
                </prop>

                <prop key="create.configurationParameter">CREATE TABLE [ConfigurationParameter]
                    (
                    [Id]                          [numeric](18, 0) IDENTITY(1,1) NOT NULL,
                    [ConfigurationIdentifier]     [varchar](256) NOT NULL,
                    [PositionRef]                 NUMERIC,
                    )

                    CREATE UNIQUE INDEX [IX_ConfigurationParameter_Identifier_PosRef] ON [ConfigurationParameter](ConfigurationIdentifier, PositionRef)
                </prop>

                <prop key="create.confParamBoolean">CREATE TABLE [ConfParamBoolean]
                    (
                    [Id]                          [numeric](18, 0) NOT NULL,
                    [Name]                        [varchar](128) NOT NULL,
                    [Value]                       [BIT] DEFAULT 0,
                    [Description]                 [varchar](256) DEFAULT NULL NULL,
                    )

                    CREATE UNIQUE INDEX [IX_ConfParamBoolean_Id] ON [ConfParamBoolean](Id)
                </prop>

                <prop key="create.confParamInteger">CREATE TABLE [ConfParamInteger]
                    (
                    [Id]                          [numeric](18, 0) NOT NULL,
                    [Name]                        [varchar](128) NOT NULL,
                    [Value]                       [numeric] DEFAULT NULL NULL,
                    [Description]                 [varchar](256) DEFAULT NULL NULL,
                    )

                    CREATE UNIQUE INDEX [IX_ConfParamInteger_Id] ON [ConfParamInteger](Id)
                </prop>

                <prop key="create.confParamList">CREATE TABLE [ConfParamList]
                    (
                    [Id]                          [numeric](18, 0) NOT NULL,
                    [Name]                        [varchar](128) NOT NULL,
                    [Description]                 [varchar](256) DEFAULT NULL NULL,
                    )

                    CREATE UNIQUE INDEX [IX_ConfParamList_Id] ON [ConfParamList](Id)
                </prop>

                <prop key="create.confParamListString">CREATE TABLE [ConfParamListString]
                    (
                    [Id]                          [numeric](18, 0) NOT NULL,
                    [PositionRef]                 [numeric] NOT NULL,
                    [Value]                       [varchar] (max) DEFAULT NULL NULL,
                    )

                    CREATE UNIQUE INDEX [IX_ConfParamListString_Id] ON [ConfParamListString](Id,PositionRef)

                </prop>

                <prop key="create.confParamLong">CREATE TABLE [ConfParamLong]
                    (
                    [Id]                          [numeric](18, 0) NOT NULL,
                    [Name]                        [varchar](128) NOT NULL,
                    [Value]                       [numeric] DEFAULT NULL NULL,
                    [Description]                 [varchar](256) DEFAULT NULL NULL,
                    )

                    CREATE UNIQUE INDEX [IX_ConfParamLong_Id] ON [ConfParamLong](Id)
                </prop>

                <prop key="create.confParamMap">CREATE TABLE [ConfParamMap]
                    (
                    [Id]                          [numeric](18, 0) NOT NULL,
                    [Name]                        [varchar](128) NOT NULL,
                    [Description]                 [varchar](256) DEFAULT NULL NULL,
                    )

                    CREATE UNIQUE INDEX [IX_ConfParamMap_Id] ON [ConfParamMap](Id)
                </prop>

                <prop key="create.confParamMapString">CREATE TABLE [ConfParamMapString]
                    (
                    [Id]                          [numeric](18, 0) NOT NULL,
                    [MapKey]                      [varchar](256) NOT NULL,
                    [Value]                       [varchar](max) DEFAULT NULL NULL,
                    )

                    CREATE UNIQUE INDEX [IX_ConfParamMapString_Id] ON [ConfParamMapString](Id,MapKey)
                </prop>

                <prop key="create.confParamString">CREATE TABLE [ConfParamString]
                    (
                    [Id]                          [numeric](18, 0) NOT NULL,
                    [Name]                        [varchar](128) NOT NULL,
                    [Value]                       [varchar] (max) DEFAULT NULL NULL,
                    [Description]                 [varchar](256) DEFAULT NULL NULL,
                    )

                    CREATE UNIQUE INDEX [IX_ConfParamString_Id] ON [ConfParamString](Id)
                </prop>
                
                <prop key="create.confParamMaskedString">CREATE TABLE [ConfParamMaskedString]					
                	(
					[Id] 						[numeric](18, 0) NOT NULL,
					[Name]                        [varchar](128) NOT NULL,
                    [Value]                       [varchar] (max) DEFAULT NULL NULL,
                    [Description]                 [varchar](256) DEFAULT NULL NULL,
					)
					
					CREATE UNIQUE INDEX [IX_ConfParamMaskedString_Id] ON [ConfParamMaskedString](Id)
				</prop>


                <prop key="create.systemEvent">CREATE TABLE [SystemEvent]
                    (
                    [Id]                    [numeric](18, 0) IDENTITY(1,1) NOT NULL,
                    [Subject]               [varchar](128) NOT NULL,
                    [Action]                [varchar](512) NOT NULL,
                    [Actor]                 [varchar](64) NULL,
                    [Timestamp]             [datetime] NOT NULL,
                    [Expiry]                [datetime] NULL,
                    CONSTRAINT              [PK_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    )
                    )
                </prop>

                <prop key="create.moduleStartup">CREATE TABLE [StartupControl]
                    (
                    [Id]                  NUMERIC (18) IDENTITY NOT NULL,
                    [ModuleName]          VARCHAR(128)  NOT NULL,
                    [FlowName]            VARCHAR(128)  NOT NULL,
                    [StartupType]         VARCHAR(16)   NOT NULL,
                    [Comment]             VARCHAR(256)  NULL,
                    CONSTRAINT            [PK_StartupControl_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    )
                    )

                    CREATE UNIQUE INDEX StartupControl01u ON StartupControl(Id)
                </prop>

                <prop key="create.consoleModule">CREATE TABLE [Module]
                    (
                    [Id]                [NUMERIC] (18) IDENTITY NOT NULL,
                    [Name]              [VARCHAR] (255) NOT NULL UNIQUE,
                    [Description]       [VARCHAR] (255) NOT NULL,
                    [DesignDiagramURL]  [VARCHAR] (255) NULL
                    CONSTRAINT [PK_Module_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    )
                    )
                </prop>
                <prop key="create.consolePointToPointFlowProfile">CREATE TABLE [PointToPointFlowProfile]
                    (
                    [Id]        [NUMERIC] IDENTITY NOT NULL,
                    [Name]      [VARCHAR] (255) NOT NULL
                    CONSTRAINT [PK_PointToPointFlowProfile_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    )
                    )
                </prop>
                <prop key="create.consolePointToPointFlow">CREATE TABLE [PointToPointFlow]
                    (
                    [Id]                        [NUMERIC] IDENTITY NOT NULL,
                    [PointToPointFlowProfileId] [NUMERIC] NOT NULL,
                    [FromModuleId]              [NUMERIC] NULL,
                    [ToModuleId]                [NUMERIC] NULL,
                    CONSTRAINT [PK_PointToPointFlow_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    ),
                    CONSTRAINT [PTPP_ID_FK] FOREIGN KEY (PointToPointFlowProfileId) REFERENCES PointToPointFlowProfile(Id)
                    )
                </prop>

                <prop key="create.users">CREATE TABLE [Users]
                    (
                    [Id]       [NUMERIC] (18) IDENTITY NOT NULL,
                    [Username] [VARCHAR] (50) NOT NULL UNIQUE,
                    [Password] [VARCHAR] (50) NOT NULL,
                    [Email]    [VARCHAR] (255) NULL,
                    [FirstName] [VARCHAR] (50) NULL,
                    [Surname] [VARCHAR] (50)   NULL,
                    [Department] [VARCHAR] (50) NULL,
                    [Enabled]  [BIT] NOT NULL,
                    PreviousAccess [NUMERIC] DEFAULT 0 NOT NULL
                    CONSTRAINT [PK_Users_Username] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    )
                    )
                </prop>
                <prop key="create.authorities">CREATE TABLE [Authorities]
                    (
                    [Id]          [NUMERIC] IDENTITY NOT NULL,
                    [Authority]   [VARCHAR](50) NOT NULL UNIQUE,
                    [Description] [VARCHAR](512)
                    CONSTRAINT [PK_Authorities_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    )
                    )
                </prop>
                <prop key="create.usersAuthorities">CREATE TABLE [UsersAuthorities]
                    (
                    [UserId]        NUMERIC NOT NULL,
                    [AuthorityId]   NUMERIC NOT NULL,
                    CONSTRAINT [PK_Authorities_UserId_AuthorityId] PRIMARY KEY CLUSTERED
                    (
                    [UserId], [AuthorityId] ASC
                    ),
                    CONSTRAINT [FK_Authorities_UserId] FOREIGN KEY (UserId) REFERENCES Users(Id),
                    CONSTRAINT [FK_Authorities_AuthorityId] FOREIGN KEY (AuthorityId) REFERENCES Authorities(Id)
                    )
                </prop>
                <prop key="create.defaultAuthorities">INSERT INTO Authorities ( Authority, Description )
                    VALUES ( 'ROLE_USER', 'Users who may log into the system' )
                    INSERT INTO Authorities ( Authority, Description )
                    VALUES ( 'ROLE_ADMIN', 'Users who may perform administration functions on the system' )
                </prop>

                <prop key="create.defaultAdminUser">declare @authorityUserId numeric(18), @authorityAdminId numeric(18), @username varchar(50), @userId numeric(18)

                    select @authorityUserId = Id from Authorities where Authority = 'ROLE_USER';
                    select @authorityAdminId = Id from Authorities where Authority = 'ROLE_ADMIN';

                    select @username = 'admin';

                    INSERT INTO Users ( Username, Password, Enabled, FirstName, Surname )
					VALUES (
					@username, 'd033e22ae348aeb5660fc2140aec35850c4da997', 1 , 'Admin', 'User')
                    select @userId = Id from Users where Username = @username;

                    INSERT INTO UsersAuthorities values ( @userId, @authorityUserId );
                    INSERT INTO UsersAuthorities values ( @userId, @authorityAdminId );
                </prop>

                <prop key="find.anyAdminUser">SELECT * FROM UsersAuthorities</prop>
                <prop key="find.usersTableExists">SELECT * from Users</prop>
				
				
				<!--  Tables required for the security module -->
				<prop key="create.securityPrincipal">CREATE TABLE [SecurityPrincipal]
					(
					   [Id]               	[NUMERIC](18)				IDENTITY NOT NULL,
					   [Name]		      	[VARCHAR](256)		   		UNIQUE NOT NULL,
					   [PrincipalType]		[VARCHAR](256)		    	NOT NULL,
					   [Description]		[VARCHAR](1024)		    	NOT NULL,
					   [CreatedDateTime]    [DATETIME] 					default ${getDate} NOT NULL,
					   [UpdatedDateTime]    [DATETIME] 					default ${getDate} NOT NULL,
					   CONSTRAINT [PK_SecurityPrincipal_Id] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					) 
					
					CREATE NONCLUSTERED INDEX [IX_Principal_Name] ON [SecurityPrincipal](Name)
					CREATE NONCLUSTERED INDEX [IX_Principal_Type] ON [SecurityPrincipal](PrincipalType)
				</prop>
				<prop key="create.securityRole">CREATE TABLE [SecurityRole]
					(
					   [Id]               	  [NUMERIC](18) 		    IDENTITY NOT NULL,
					   [Name]		      	  [VARCHAR](256)		    UNIQUE NOT NULL,
					   [Description]	      [VARCHAR](1024)			NOT NULL,
					   [CreatedDateTime]      [DATETIME] 				default ${getDate} NOT NULL,
					   [UpdatedDateTime]      [DATETIME] 				default ${getDate} NOT NULL,
					   CONSTRAINT [PK_SecurityRole_Id] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					) 
					
					CREATE NONCLUSTERED INDEX [IX_Role_Name] ON [SecurityRole](Name)
				</prop>
				<prop key="create.securityPolicy">CREATE TABLE [SecurityPolicy]
					(
					   [Id]               	  [NUMERIC](18) 		IDENTITY NOT NULL,
					   [PolicyLinkId]         [NUMERIC](18) 		NULL,
					   [Name]		      	  [VARCHAR](256) 		UNIQUE NOT NULL,
					   [Description]	      [VARCHAR](1024)		NOT NULL,
					   [CreatedDateTime]      [DATETIME] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]      [DATETIME] 			default ${getDate} NOT NULL,
					   CONSTRAINT [PK_SecurityPolicy_Id] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   ),
	                   CONSTRAINT [FK_SP_PolicyLink_Id] FOREIGN KEY (PolicyLinkId) REFERENCES PolicyLink(Id)
					) 
					CREATE NONCLUSTERED INDEX [IX_Policy_Name] ON [SecurityPolicy](Name)
				</prop>
				<prop key="create.userPrincipal">CREATE TABLE [UserPrincipal]
					(
					   [UserId]         		[NUMERIC](18) 	NOT NULL,
					   [PrincipalId]            [NUMERIC](18) 	NOT NULL,
					   [CreatedDateTime]      	[DATETIME] 		default ${getDate} NOT NULL,
					   [UpdatedDateTime]      	[DATETIME] 		default ${getDate} NOT NULL,
					   CONSTRAINT [PK_UserPrincipal] PRIMARY KEY CLUSTERED
	                   (
	                    	[UserId], [PrincipalId] ASC
	                   ),
	                   CONSTRAINT [FK_UP_Principal_Id] FOREIGN KEY (PrincipalId) REFERENCES SecurityPrincipal(Id),
	                   CONSTRAINT [FK_UP_User_Id] FOREIGN KEY (UserId) REFERENCES Users(Id)
					) 
				</prop>
				<prop key="create.principalRole">CREATE TABLE [PrincipalRole]
					(
					   [PrincipalId]            [NUMERIC](18) 	NOT NULL,
					   [RoleId]         		[NUMERIC](18) 	NOT NULL,
					   [CreatedDateTime]      	[DATETIME] 		default ${getDate} NOT NULL,
					   [UpdatedDateTime]      	[DATETIME] 		default ${getDate} NOT NULL,
					   CONSTRAINT [PK_PrincipalRole] PRIMARY KEY CLUSTERED
	                   (
	                    	[PrincipalId], [RoleId] ASC
	                   ),
	                   CONSTRAINT [FK_PR_Principal_Id] FOREIGN KEY (PrincipalId) REFERENCES SecurityPrincipal(Id),
	                   CONSTRAINT [FK_PR_Role_Id] FOREIGN KEY (RoleId) REFERENCES SecurityRole(Id)
					) 
				</prop>
				<prop key="create.rolePolicy">CREATE TABLE [RolePolicy]
					(
					   [RoleId]               	    [NUMERIC](18) 	NOT NULL,
					   [PolicyId]               	[NUMERIC](18) 	NOT NULL,
					   [CreatedDateTime]      		[DATETIME] 		default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[DATETIME] 		default ${getDate} NOT NULL,
					   CONSTRAINT [PK_RolePolicy] PRIMARY KEY CLUSTERED
	                   (
	                    	[RoleId], [PolicyId] ASC
	                   ),
	                   CONSTRAINT [FK_RP_Policy_Id] FOREIGN KEY (PolicyId) REFERENCES SecurityPolicy(Id),
	                   CONSTRAINT [FK_RP_Role_Id] FOREIGN KEY (RoleId) REFERENCES SecurityRole(Id)
					) 
				</prop>
				<prop key="create.policyLinkType">CREATE TABLE [PolicyLinkType]
					(
					   [Id]             			[NUMERIC](18) 	IDENTITY NOT NULL,
					   [Name]		      			[VARCHAR](256) 	UNIQUE NOT NULL,
					   [TableName]		      		[VARCHAR](256) 	UNIQUE NOT NULL,
					   [CreatedDateTime]      		[DATETIME] 		default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[DATETIME] 		default ${getDate} NOT NULL,
					   CONSTRAINT [PK_PolicyLinkType] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					) 
				</prop>
				<prop key="create.policyLink">CREATE TABLE [PolicyLink]
					(
					   [Id]               			[NUMERIC](18) 	IDENTITY NOT NULL,
					   [PolicyLinkTypeId]     		[NUMERIC](18) 	NOT NULL,
					   [TargetId]         			[NUMERIC](18) 	NOT NULL,
					   [Name]				      	[VARCHAR](256) 	NOT NULL,
					   [CreatedDateTime]      		[DATETIME] 		default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[DATETIME] 		default ${getDate} NOT NULL,
					   CONSTRAINT [PK_PolicyLink] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   ),
	                   CONSTRAINT [FK_PL_PolicyLinkType_Id] FOREIGN KEY (PolicyLinkTypeId) REFERENCES PolicyLinkType(Id)
					) 

				</prop>				
				<prop key="create.authenticationMethod">CREATE TABLE [AuthenticationMethod]
					(
					   [Id]               			[NUMERIC](18) 	IDENTITY NOT NULL,
					   [Name]    		          	[VARCHAR](128) 	NOT NULL,
					   [Method]    		          	[VARCHAR](128) 	NOT NULL,
					   [AuthOrder]               	[NUMERIC](18) 	NOT NULL,
					   [LastSynchronised]      		[DATETIME] 		NULL,
					   [Enabled]      				[BIT] 			DEFAULT 1,
					   [LdapServerUrl]    		  	[VARCHAR](256) 	NULL,
					   [LdapBindUserDn]		      	[VARCHAR](256) 	NULL,
					   [LdapBindUserPassword]   	[VARCHAR](64) 	NULL,
					   [LdapUserSearchBaseDn]   	[VARCHAR](256) 	NULL,
					   [LdapUserSearchFilter]   	[VARCHAR](64) 	NULL,
					   [EmailAttributeName] 		[VARCHAR](64) 	NULL,
					   [UserAccNameAttributeName] 	[VARCHAR](64) 	NULL,
					   [AccountTypeAttributeName]   [VARCHAR](64) 	NULL,
					   [AppSecBaseDn]   			[VARCHAR](256) 	NULL,
					   [AppSecGroupAttributeName] 	[VARCHAR](64) 	NULL,
					   [FirstNameAttributeName] 	[VARCHAR](64) 	NULL,
					   [SurnameAttributeName] 		[VARCHAR](64) 	NULL,
					   [DepartmentAttributeName]	[VARCHAR](64) 	NULL,
					   [AppSecDescAttributeName]	[VARCHAR](64) 	NULL,
					   [LdapUserDescAttributeName]	[VARCHAR](64) 	NULL,
					   [MemberofAttributeName]		[VARCHAR](64) 	NULL,
					   [CreatedDateTime]      		[DATETIME] 		default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[DATETIME] 		default ${getDate} NOT NULL,
					   CONSTRAINT [PK_AuthenticationMethod] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					) 
				</prop>
								
				<!-- Tables required for the ikasan mapping module -->
				<prop key="create.mappingConfigurationType">CREATE TABLE [MCSConfigurationType]
					(
					   [Id]               	[NUMERIC](18) 		   	IDENTITY NOT NULL,
					   [Name]		      	[VARCHAR](256)		   	UNIQUE NOT NULL,
					   [CreatedDateTime]    [DATETIME] 				default ${getDate} NOT NULL,
					   [UpdatedDateTime]    [DATETIME] 				default ${getDate} NOT NULL,
					   CONSTRAINT [PK_MCSConfigurationType] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					) 
				</prop>

				<prop key="create.mappingConfigurationContext">CREATE TABLE [MCSConfigurationContext]
					(
					   [Id]               	[NUMERIC](18) 		   	IDENTITY NOT NULL,
					   [Name]		      	[VARCHAR](256)		   	UNIQUE NOT NULL,
					   [Description]      	[VARCHAR](1024)		   	NOT NULL,
					   [CreatedDateTime]    [DATETIME] 				default ${getDate} NOT NULL,
					   [UpdatedDateTime]    [DATETIME] 				default ${getDate} NOT NULL,
					   CONSTRAINT [PK_MCSConfigurationContext] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					) 
				</prop>

				<prop key="create.mappingConfigurationClient">CREATE TABLE [MCSConfigServiceClient]
					(
					   [Id]               					[NUMERIC](18) 		IDENTITY NOT NULL,
					   [Name]		      					[VARCHAR](256)		UNIQUE NOT NULL,
					   [KeyLocationQueryProcessorType]		[VARCHAR](256) 		NOT NULL,
					   [CreatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   CONSTRAINT [PK_MCSConfigServiceClient] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					) 
					CREATE NONCLUSTERED INDEX [IX_ConfigServiceClient_Name] ON [MCSConfigServiceClient](Name)
				</prop>
				
				<prop key="create.mappingConfiguration">CREATE TABLE [MCSMappingConfiguration]
					(
					   [Id]               					[NUMERIC](18) 		IDENTITY NOT NULL,
					   [SourceContextId]         			[NUMERIC](18) 		NOT NULL,
					   [TargetContextId]         			[NUMERIC](18) 		NOT NULL,
					   [NumberOfParams]       				[NUMERIC](18) 		NOT NULL,
					   [Description]         				[VARCHAR](1024) 	NOT NULL,
					   [ConfigurationTypeId]  				[NUMERIC](18) 		NOT NULL,
					   [ConfigurationServiceClientId]  		[NUMERIC](18) 		NOT NULL,
					   [CreatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   CONSTRAINT [PK_MCSMappingConfiguration] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   ),
	                   CONSTRAINT [FK_ConfigurationType_Id] FOREIGN KEY (ConfigurationTypeId) REFERENCES MCSConfigurationType(Id),
					   CONSTRAINT [FK_ConfigurationServiceClient_Id] FOREIGN KEY (ConfigurationServiceClientId) REFERENCES MCSConfigServiceClient(Id)
					) 
					CREATE NONCLUSTERED INDEX [IX_ConfigurationType_Id] ON [MCSMappingConfiguration](ConfigurationTypeId)					
					CREATE UNIQUE INDEX  MappingConfig_unique ON [MCSMappingConfiguration](ConfigurationServiceClientId, SourceContextId, TargetContextId, ConfigurationTypeId)
				</prop>
				
				<prop key="create.mappingTargetValue">CREATE TABLE [MCSTargetConfigValue]
					(
					   [Id]               					[NUMERIC](18) 		IDENTITY NOT NULL,
					   [TargetSystemValue]    				[VARCHAR](256) 		NOT NULL,   
					   [CreatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   CONSTRAINT [PK_MCSTargetConfigValue] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					) 
				</prop>
				
				<prop key="create.mappingSourceValue">CREATE TABLE [MCSSourceConfigValue]
					(
					   [Id]               					[NUMERIC](18) 		IDENTITY NOT NULL,
					   [SourceSystemValue]    				[VARCHAR](256)		NOT NULL,
					   [MappingConfigurationId]				[NUMERIC](18) 		NOT NULL,
					   [TargetConfigurationValueId]  		[NUMERIC](18) 		NOT NULL,
					   [SourceConfigGroupId]          		[NUMERIC](18) 		NULL,
					   [CreatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   CONSTRAINT [PK_MCSSourceConfigValue] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   ),
	                   CONSTRAINT [FK_MappingConfiguration_Id] FOREIGN KEY (MappingConfigurationId) REFERENCES MCSMappingConfiguration(Id),
	                   CONSTRAINT [FK_TargetConfigurationValue_Id] FOREIGN KEY (TargetConfigurationValueId) REFERENCES MCSTargetConfigValue(Id)
					) 		
					CREATE NONCLUSTERED INDEX [IX_SrcConfigValue_ConfigContextId] ON [MCSSourceConfigValue](MappingConfigurationId)
					CREATE NONCLUSTERED INDEX [IX_SrcConfig_TgtSysConfigValueId] ON [MCSSourceConfigValue](TargetConfigurationValueId)
				</prop>
				
				<prop key="create.mappingKeyLocationQuery">CREATE TABLE [MCSKeyLocationQuery]
					(
					   [Id]               					[NUMERIC](18) 		IDENTITY NOT NULL,
					   [Value]			    				[VARCHAR](256) 		NOT NULL,
					   [MappingConfigurationId]    			[NUMERIC](18) 		NOT NULL,
					   [CreatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   CONSTRAINT [PK_MCSKeyLocationQuery] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   ),
	                   CONSTRAINT [FK_KLQ_MappingConfiguration_Id] FOREIGN KEY (MappingConfigurationId) REFERENCES MCSMappingConfiguration(Id)
					) 
				</prop>
				
				<prop key="create.mappingSourceConfigGroupSeq">CREATE TABLE [MCSSourceConfigGroupSeq]
					(
					   [Id]               					[NUMERIC](18) 		IDENTITY NOT NULL,
					   [SequenceNumber]   					[NUMERIC](18) 		NULL,
					    CONSTRAINT [PK_MCSSourceConfigGroupSeq] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					)
															
					SET IDENTITY_INSERT MCSSourceConfigGroupSeq ON
					insert into MCSSourceConfigGroupSeq (
					   Id
					  ,SequenceNumber
					) VALUES (
					   1
					  ,100)
				   SET IDENTITY_INSERT MCSSourceConfigGroupSeq OFF
				</prop>
				
				<prop key="create.platformConfiguration">CREATE TABLE [PlatformConfiguration]
					(
					   [Id]               					[NUMERIC](18) 		IDENTITY NOT NULL,
					   [Name]			    				[VARCHAR] 			NOT NULL,
					   [Value]			    				[VARCHAR] 			NOT NULL,
					   [CreatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]    				[DATETIME] 			default ${getDate} NOT NULL,
					   CONSTRAINT [PK_PlatformConfiguration] PRIMARY KEY CLUSTERED
	                   (
	                    	[Id] ASC
	                   )
					) 
				</prop>
                <prop key="create.checksumCommand">CREATE TABLE [FTChecksumCommand]
                    (
                    [Id]                    [numeric](18) NOT NULL,
                    [Destructive]           [bit]         NOT NULL,
                    [ChecksumFilePath]      [varchar](255) NULL,
                    CONSTRAINT              [PK_FTChecksumCommand_Id] PRIMARY KEY CLUSTERED
                    (
                    [Id] ASC
                    )
                    )
                </prop>

                <prop key="create.cleanupChunksCommand">CREATE TABLE [FTCleanupChunksCommand]
                    (
                    [Id]                    [numeric](18)  NOT NULL,
                    [FileChunkHeaderId]     [numeric](18)  NULL,
                    CONSTRAINT              [PK_FTCleanupChunksCommand_Id] PRIMARY KEY CLUSTERED
                    (
                        [Id] ASC
                    )
                    )
                </prop>

                <prop key="create.deliverBatchCommand">CREATE TABLE [FTDeliverBatchCommand]
					(
					[Id]                     [numeric](18)  NOT NULL,
					[OutputDirectory]        [varchar](255) NULL,
					[TempDirectory]          [varchar](255) NULL,
					[BatchFolder]            [varchar](255) NULL,
                    [PutAttempted]           [bit] NOT NULL,
                    CONSTRAINT              [PK_FTDeliverBatchCommand_Id] PRIMARY KEY CLUSTERED
                    (
                        [Id] ASC
                    )
                    )
                </prop>

                <prop key="create.deliverFileCommand">CREATE TABLE [FTDeliverFileCommand]
                    (
                    [Id]                     [numeric](18)  NOT NULL,
                    [FileName]               [varchar](255) NULL,
                    [TempFileName]           [varchar](255) NULL,
                    [OutputDirectory]        [varchar](255) NULL,
                    [OverwriteExisting]      [bit] NOT NULL,
                    [PutAttempted]           [bit] NOT NULL,
                    CONSTRAINT              [PK_FTDeliverFileCommand_Id] PRIMARY KEY CLUSTERED
                    (
                        [Id] ASC
                    )
                    )
                </prop>

                <prop key="create.fileChunkHeader">CREATE TABLE [FTFileChunkHeader]
                    (
                    [Id]                [numeric](18)  IDENTITY NOT NULL,
                    [SequenceLength]    [numeric](18) NOT NULL,
                    [InternalMd5Hash]   [varchar](32) NULL,
                    [ExternalMd5Hash]   [varchar](32) NULL,
                    [FileName]          [varchar](255) NOT NULL,
                    [ChunkTimeStamp]    [numeric](18) NOT NULL,
                    [ClientId]          [varchar](255) NULL,
                    CONSTRAINT          [PK_FTFileChunkHeader_Id] PRIMARY KEY CLUSTERED
                    (
                        [Id] ASC
                    )
                    )
                </prop>

                <prop key="create.fileChunk">CREATE TABLE [FTFileChunk]
                    (
                    [Id]                [numeric](18)  IDENTITY NOT NULL,
                    [Content]           [image]  NOT NULL,
                    [Ordinal]           [numeric](18) NOT NULL,
                    [Md5Hash]  		    [varchar](32) NULL,
                    [FileChunkHeaderId] [numeric](18) NOT NULL,
                    CONSTRAINT          [PK_FTFileChunk_Id] PRIMARY KEY CLUSTERED
                    (
                        [Id] ASC
                    ),
                    CONSTRAINT [FK_FTFileChunk_FileChunkHeaderId] FOREIGN KEY (FileChunkHeaderId) REFERENCES FTFileChunkHeader(Id)
                    )
                </prop>

                <prop key="create.fileFilter">CREATE TABLE [FTFileFilter]
                    (
                    [Id]                [numeric](18)  IDENTITY NOT NULL,
                    [ClientId]          [varchar](255)  NOT NULL,
                    [Criteria]          [varchar](512)  NOT NULL,
                    [LastModified]      [datetime]      NOT NULL,
                    [LastAccessed]      [datetime]      NOT NULL,
                    [Size]              [numeric](18) NOT NULL,
                    [CreatedDateTime]  [numeric](18) NOT NULL,
                    CONSTRAINT          [PK_FTFileFilter_Id] PRIMARY KEY CLUSTERED
                    (
                        [Id] ASC
                    )
                    )

                    CREATE UNIQUE INDEX [IX_FTFileFilter_02] ON [FTFileFilter](ClientId,Criteria,LastModified,Size)
                    CREATE UNIQUE INDEX [IX_FTFileFilter_03] ON [FTFileFilter](ClientId,CreatedDateTime)
                </prop>

                <prop key="create.retrieveFileCommand">CREATE TABLE [FTRetrieveFileCommand]
                    (
                    [Id]                   [numeric](18)  NOT NULL,
                    [Destructive]          [bit]          NOT NULL,
                    [RenameOnSuccess]      [bit]          NOT NULL,
                    [RenameExtension]      [varchar](255) NULL,
                    [MoveOnSuccess]        [bit]          NOT NULL,
                    [MoveNewPath]          [varchar](255) NULL,
                    [SourcePath]           [varchar](255) NULL,
                    CONSTRAINT             [PK_FTRetrieveFileCommand_Id] PRIMARY KEY CLUSTERED
                    (
                        [Id] ASC
                    )
                    )
                </prop>

                <prop key="create.xid">CREATE TABLE [FTXid]
                    (
                    [Id]                       [numeric](18)   IDENTITY NOT NULL,
                    [State]                    [varchar](255)  NOT NULL,
                    [GlobalTransactionId]      [varchar](255)  NOT NULL,
                    [BranchQualifier]          [varchar] (255) NOT NULL,
                    [FormatId]                 [numeric](18)    NOT NULL,
                    [ClientId]                 [varchar](255)  NOT NULL,
                    [CreatedDateTime]          [numeric](18)   NOT NULL,
                    [LastUpdatedDateTime]      [numeric](18)   NOT NULL,
                    CONSTRAINT                 [PK_FTXid_Id]   PRIMARY KEY CLUSTERED
                    (
                        [Id] ASC
                    )
                    )
                    CREATE UNIQUE INDEX [IX_FTXid_02] ON [FTXid](GlobalTransactionId, BranchQualifier)
                </prop>

                <prop key="create.transactionalResourceCommand">CREATE TABLE [FTTransactionalResourceCommand]
                    (
                    [Id]                  [numeric](18)   IDENTITY NOT NULL,
                    [State]               [varchar](255)  NOT NULL,
                    [Xid_Id]              [numeric](18)   NOT NULL,
                    [Type]                [varchar](255)  NOT NULL,
                    [ExecutionTimestamp]  [varchar](24)   NULL,
                    CONSTRAINT            [PK_FTTransactionalResourceCommand_Id] PRIMARY KEY CLUSTERED
                    (
                        [Id] ASC
                    ),
                    CONSTRAINT [FK_FTTransactionalResourceCommand_Xid_Id] FOREIGN KEY (Xid_Id) REFERENCES FTXid(Id)
                    )
                </prop>
                
				<!--  Topology Service Tables -->
                <prop key="create.server">CREATE TABLE Server
					(
					   [Id]             			[numeric](18) 		IDENTITY NOT NULL,
					   [Name]		      			[varchar](256) 		UNIQUE NOT NULL,
					   [Description]	      		[varchar](1024) 	NOT NULL,
					   [Url]		      			[varchar](256) 		NOT NULL,
					   [Port]						[numeric](18) 		NOT NULL,
					   [CreatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   CONSTRAINT            [PK_Server_Id] PRIMARY KEY CLUSTERED
						(
							[Id] ASC
						)
					) 

                </prop>
                
                <prop key="create.ikasanModule">CREATE TABLE IkasanModule
					(
					   [Id]             			[numeric](18) 		IDENTITY NOT NULL,
					   [Name]		      			[varchar](256) 		UNIQUE NOT NULL,
					   [ContextRoot]     			[varchar](256) 		NOT NULL,
					   [Description]		      	[varchar](1024) 	NOT NULL,
					   [DiagramUrl]      			[varchar](256) 		NULL,
					   [Version]      				[varchar](256) 		NULL,
					   [ServerId]					[numeric](18) 		NULL,
					   [CreatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   CONSTRAINT            		[PK_IkasanModule_Id] PRIMARY KEY CLUSTERED
						(
							[Id] ASC
						)

					) 
                </prop>
                
                <prop key="create.flow">CREATE TABLE Flow
					(
					   [Id]             			[numeric](18) 		IDENTITY NOT NULL,
					   [Name]		      			[varchar](256) 		NOT NULL,
					   [Description]		      	[varchar](1024) 	NOT NULL,
					   [ModuleId]					[numeric](18) 		NULL,
					   [CreatedDateTime]      		[datetime] 		default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[datetime] 		default ${getDate} NOT NULL,
					   CONSTRAINT            [PK_Flow_Id] PRIMARY KEY CLUSTERED
						(
							[Id] ASC
						)
					) 
                </prop>
                
                <prop key="create.component">CREATE TABLE Component
					(
					   [Id]             			[numeric](18) 		IDENTITY NOT NULL,
					   [Name]		      			[varchar](256) 		NOT NULL,
					   [Description]		      	[varchar](1024) 	NOT NULL,
					   [IsConfigurable]				[bit] 				DEFAULT 0,
					   [FlowId]						[numeric](18) 		NULL,
					   [ConfigurationId]			[varchar](256) 		NULL,
					   [ComponentOrder]				[numeric](18) 		NULL,
					   [CreatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   CONSTRAINT            [PK_Component_Id] PRIMARY KEY CLUSTERED
						(
							[Id] ASC
						)
					) 
                </prop>
                
                <prop key="create.businessStream">CREATE TABLE BusinessStream
					(
					   [Id]             			[numeric](18) 		IDENTITY NOT NULL,
					   [Name]		      		[varchar](256) 			UNIQUE NOT NULL,
					   [Description]		      	[varchar](1024) 	NOT NULL,
					   [CreatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   CONSTRAINT            [PK_BusinessStream_Id] 	PRIMARY KEY CLUSTERED
						(
							[Id] ASC
						)
					) 
                </prop>
                
                <prop key="create.businessStreamFlow">CREATE TABLE BusinessStreamFlow
					(
					   [BusinessStreamId]			[numeric](18) 		NOT NULL,
					   [FlowId]						[numeric](18) 		NOT NULL,
					   [FlowOrder]					[numeric](18) 		NOT NULL,
					   [CreatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[datetime] 			default ${getDate} NOT NULL,
					   CONSTRAINT PK_BusinessStreamFlow PRIMARY KEY CLUSTERED 
					   (
							[BusinessStreamId], [FlowId]
					   ),
					   CONSTRAINT [FK_BusinessStreamFlow_BusinessStreamId] FOREIGN KEY (BusinessStreamId) REFERENCES BusinessStream(Id)
					) 
                </prop>
                
                <prop key="create.userBusinessStream">CREATE TABLE UserBusinessStream
					(
					   [UserId]						[numeric](18) 			NOT NULL,
					   [BusinessStreamId]			[numeric](18) 			NOT NULL,
					   [CreatedDateTime]      		[datetime] 				default ${getDate} NOT NULL,
					   [UpdatedDateTime]      		[datetime] 				default ${getDate} NOT NULL,
					   CONSTRAINT PK_UserBusinessStream PRIMARY KEY CLUSTERED 
					   (
							 [UserId], [BusinessStreamId]
					   ),
					   CONSTRAINT [FK_UserBusinessStream_UserId] FOREIGN KEY (UserId) REFERENCES Users(Id),
					   CONSTRAINT [FK_UserBusinessStream_BusinessStreamId] FOREIGN KEY (BusinessStreamId) REFERENCES BusinessStream(Id)
					) 
                </prop>
                
                <!--  Hospital Service Tables -->
                <prop key="create.exclusionEventAction">CREATE TABLE ExclusionEventAction
					(
					   [Id]							[numeric](18) 		IDENTITY NOT NULL,
					   [ErrorUri]	      			[varchar](256) 		UNIQUE NOT NULL,
					   [ModuleName]		      		[varchar](256) 		NOT NULL,
					   [FlowName]	      			[varchar](256)		NOT NULL,
					   [ActionedBy]		      		[varchar](256) 		NOT NULL,
					   [Action]		      			[varchar](32) 		NOT NULL,
					   [Event]                 		[varbinary](max) 	NOT NULL,
					   [Timestamp]		      		[numeric](18) 		NOT NULL,
					   CONSTRAINT            [PK_ExclusionEventAction_Id] PRIMARY KEY CLUSTERED
						(
							[Id] ASC
						)
					) 
					
					CREATE NONCLUSTERED INDEX [ExclEventAction_ErrorUri] ON [ExclusionEventAction](ErrorUri)
                </prop>

				
				<prop key="create.defaultPrincipal">declare @securityPrincipalId numeric(18),
					@securityRoleId numeric(18), @securityPolicyId numeric(18), @userId numeric(18)
					
					INSERT INTO 
					SecurityPrincipal ( Name, PrincipalType, Description )
					VALUES ( 'admin', 'user', 'This administrator user')
					
					
					select @securityPrincipalId = Id 
					from SecurityPrincipal 
					where Name = 'admin'
					
					select @userId = Id from Users where Username = 'admin'
					
					INSERT
					INTO UserPrincipal ( UserId, PrincipalId )
					VALUES ( @userId, @securityPrincipalId )
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'Administrators',
					'Users who may perform administration functions on
					the system' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'Administrators'
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'ALL', 'Policy to do everything' )
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'ALL'
					
					INSERT
					INTO PrincipalRole ( PrincipalId, RoleId )
					VALUES ( @securityPrincipalId, @securityRoleId )
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'ALL'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'User',
					'Users who have a read only view on the system' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'User'
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'Read Only', 'Read only policy' )
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'Read Only'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'COP Stream Administrator',
					'Cash Operations Stream Administrators' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'COP Stream Administrator'
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'Read Only'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Control', 'Ability to control COP flows' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Control'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Wiretap', 'Ability to view COP wiretaps' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Wiretap'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Errors', 'View COP errors' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Errors'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Replay', 'Policy to replay COP data' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Replay'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Hospital', 'Policy to use the hospital for COP data' )

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Hospital'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'COP Stream User',
					'Cash Operations Stream User' )
					
					select @securityRoleId = Id 
					from SecurityRole 
					where Name = 'COP Stream User'
					
					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Wiretap'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					

					select @securityPolicyId = Id 
					from SecurityPolicy 
					where Name = 'COP Errors'
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId )
					
					INSERT
					INTO PolicyLinkType ( Name, TableName )
					VALUES ( 'Mapping Configuration',  'MCSMappingConfiguration' )
					
				</prop>
			</props>
		</property>
	</bean>

	<bean id="H2"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="singleton" value="true" />

		<property name="properties">
			<props>
				<prop key="drop.usersAuthorities">DROP TABLE UsersAuthorities;</prop>
				<prop key="drop.authorities">DROP TABLE Authorities;</prop>
				<prop key="drop.users">DROP TABLE Users;</prop>
				<prop key="drop.consolePointToPointFlow">DROP TABLE PointToPointFlow</prop>
				<prop key="drop.consolePointToPointFlowProfile">DROP TABLE PointToPointFlowProfile;</prop>
				<prop key="drop.consoleModule">DROP TABLE Module;</prop>
				<prop key="drop.moduleStartup">DROP TABLE StartupControl;</prop>
				<prop key="drop.systemEvent">DROP TABLE SystemEvent;</prop>
				<prop key="drop.confParamString">DROP TABLE ConfParamString;</prop>
				<prop key="drop.confParamMaskedString">DROP TABLE ConfParamMaskedString;</prop>
				<prop key="drop.confParamMapString">DROP TABLE ConfParamMapString;</prop>
				<prop key="drop.confParamMap">DROP TABLE ConfParamMap;</prop>
				<prop key="drop.confParamLong">DROP TABLE ConfParamLong;</prop>
				<prop key="drop.confParamListString">DROP TABLE ConfParamListString;</prop>
				<prop key="drop.confParamList">DROP TABLE ConfParamList;</prop>
				<prop key="drop.confParamInteger">DROP TABLE ConfParamInteger;</prop>
				<prop key="drop.confParamBoolean">DROP TABLE ConfParamBoolean;</prop>
				<prop key="drop.configurationParameter">DROP TABLE ConfigurationParameter;</prop>
				<prop key="drop.configuration">DROP TABLE Configuration;</prop>
				<prop key="drop.flowEventTriggerParameters">DROP TABLE FlowEventTriggerParameters;</prop>
				<prop key="drop.flowEVentTrigger">DROP TABLE FlowEventTrigger;</prop>
				<prop key="drop.version">DROP TABLE Version;</prop>
                <prop key="drop.exclusionEvent">DROP TABLE ExclusionEvent;</prop>
                <prop key="drop.errorOccurrence">DROP TABLE ErrorOccurrence;</prop>
				<prop key="drop.filter">DROP TABLE MessageFilter;</prop>
				<prop key="drop.wiretap">DROP TABLE IkasanWiretap;</prop>
				<prop key="drop.rolePolicy">DROP TABLE RolePolicy;</prop>
				<prop key="drop.principalRole">DROP TABLE PrincipalRole;</prop>
				<prop key="drop.securityPolicy">DROP TABLE SecurityPolicy;</prop>
				<prop key="drop.securityPolicy">DROP TABLE SecurityRole;</prop>
				<prop key="drop.securityPrincipal">DROP TABLE SecurityPrincipal;</prop>
				<prop key="drop.mappingConfiguration">DROP TABLE MCSConfigurationConfiguration;</prop>
				<prop key="drop.mappingConfigurationClient">DROP TABLE MCSConfigurationClient;</prop>
				<prop key="drop.mappingConfigurationContext">DROP TABLE MCSConfigurationContext;</prop>
				<prop key="drop.mappingConfigurationType">DROP TABLE MCSConfigurationType;</prop>			
				<prop key="drop.mappingSourceConfigGroupSeq">DROP TABLE MCSSourceConfigGroupSeq;</prop>
				<prop key="drop.mappingSourceValue">DROP TABLE MCSSourceConfigValue;</prop>
				<prop key="drop.mappingTargetValue">DROP TABLE MCSTargetConfigValue;</prop>
                <!-- FileTransfer tables-->
                <prop key="drop.checksumCommand">DROP TABLE FTChecksumCommand;</prop>
                <prop key="drop.cleanupChunksCommand">DROP TABLE FTCleanupChunksCommand;</prop>
                <prop key="drop.deliverBatchCommand">DROP TABLE FTDeliverBatchCommand;</prop>
                <prop key="drop.deliverFileCommand">DROP TABLE FTDeliverFileCommand;</prop>
                <prop key="drop.fileChunk">DROP TABLE FTFileChunk;</prop>
                <prop key="drop.fileChunkHeader">DROP TABLE FTFileChunkHeader;</prop>
                <prop key="drop.fileFilter">DROP TABLE FTFileFilter;</prop>
                <prop key="drop.retrieveFileCommand">DROP TABLE FTRetrieveFileCommand;</prop>
                <prop key="drop.transactionalResourceCommand">DROP TABLE FTTransactionalResourceCommand;</prop>
                <prop key="drop.xid">DROP TABLE FTXid;</prop>
				
				<!-- Topology tables-->
				<prop key="drop.userBusinessStream">DROP TABLE UserBusinessStream;</prop>
				<prop key="drop.businessStreamFlow">DROP TABLE BusinessStreamFlow;</prop>
				<prop key="drop.businessStream">DROP TABLE BusinessStream;</prop>
				<prop key="drop.component">DROP TABLE Component;</prop>
				<prop key="drop.flow">DROP TABLE Flow;</prop>
				<prop key="drop.ikasanModule">DROP TABLE IkasanModule;</prop>
				<prop key="drop.server">DROP TABLE Server;</prop>
				
				<!-- Hospital tables-->
				<prop key="drop.exclusionEventAction">DROP TABLE ExclusionEventAction;</prop>
				
				<!-- Error categorisation tables-->
				<prop key="drop.errorCategorisationLink">DROP TABLE ErrorCategorisationLink;</prop>
				<prop key="drop.errorCategorisation">DROP TABLE ErrorCategorisation;</prop>
				
				<!-- Error categorisation tables-->
				<prop key="create.errorCategorisationLink">CREATE TABLE ErrorCategorisationLink
					(
						Id             			IDENTITY NOT NULL,
						ErrorCategorisationId	NUMERIC NOT NULL,
						ModuleName 				VARCHAR(64) NOT NULL,
						FlowName 				VARCHAR(64) NOT NULL,
						FlowElementName 		VARCHAR(64) NOT NULL,
						Action 					VARCHAR(32) NOT NULL,
						ExceptionClass 			VARCHAR(255) NOT NULL
					);
					
					ALTER TABLE ErrorCategorisationLink
					ADD FOREIGN KEY
					(ErrorCategorisationId)
					REFERENCES ErrorCategorisation(Id);

					CREATE UNIQUE INDEX
					ErrorCategorisationLink01u ON
					ErrorCategorisationLink(ModuleName,FlowName,FlowElementName, Action, ExceptionClass)</prop>
					
				<prop key="create.errorCategorisation">CREATE TABLE ErrorCategorisation
					(
						Id             			IDENTITY NOT NULL,
						ErrorCategory 			VARCHAR(64) NOT NULL,
						ErrorDescription	 	VARCHAR(2048) NOT NULL
					);</prop>


				<prop key="create.wiretap">CREATE TABLE IkasanWiretap
					(
					Id IDENTITY NOT NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT NULL,
					ComponentName VARCHAR(128) NOT NULL,
					EventId VARCHAR(255) NOT NULL,
					RelatedEventId VARCHAR(255) NULL,
					EventTimestamp NUMERIC DEFAULT 0
					NOT NULL,
					PayloadContent TEXT NOT NULL,
					CreatedDateTime NUMERIC NOT
					NULL,
					Expiry NUMERIC NOT NULL
					);
					CREATE UNIQUE INDEX IkasanWiretap01u
					ON IkasanWiretap(Id);
				</prop>

                <prop key="create.errorOccurrence">CREATE TABLE ErrorOccurrence
                    (
                    Uri VARCHAR(256) NOT NULL,
                    ModuleName VARCHAR(256) NOT NULL,
                    FlowName VARCHAR(256) NOT NULL,
                    FlowElementName VARCHAR(256) NOT NULL,
					ErrorDetail TEXT NULL,
					ErrorMessage TEXT NULL,
					ExceptionClass VARCHAR(512) NULL,
                    EventLifeIdentifier VARCHAR(256) NULL,
                    EventRelatedIdentifier VARCHAR(256) NULL,
                    Action VARCHAR(256) NULL,
                    Event BINARY NULL,
                    Timestamp NUMERIC NOT NULL,
                    Expiry NUMERIC NOT NULL
                    );
                    CREATE UNIQUE INDEX ErrorOccurrence01u ON
                    ErrorOccurrence(ModuleName,FlowName,FlowElementName,Uri,Timestamp)
                </prop>

                <prop key="create.filter">CREATE TABLE MessageFilter
					(
					Criteria NUMERIC DEFAULT 0
					NOT NULL,
					ClientId VARCHAR(256) NOT NULL,
					CriteriaDescription
					VARCHAR(512) NULL,
					CreatedDateTime NUMERIC NOT NULL,
					Expiry NUMERIC
					NOT NULL
					);
					CREATE UNIQUE INDEX MessageFilter01u ON
					MessageFilter(Criteria,ClientId)
				</prop>

				<prop key="create.flowEventTrigger">CREATE TABLE FlowEventTrigger
					(
					Id IDENTITY NOT NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT NULL,
					Relationship VARCHAR(32) NOT NULL,
					FlowElementName VARCHAR(128),
					JobName VARCHAR(64) NOT NULL
					);
					CREATE UNIQUE INDEX
					FlowEventTrigger01u ON FlowEventTrigger(Id);
				</prop>

				<prop key="create.flowEventTriggerParameters">CREATE TABLE FlowEventTriggerParameters
					(
					TriggerId
					NUMERIC NOT NULL,
					ParamName VARCHAR(128) NOT NULL,
					ParamValue
					VARCHAR(128)
					);
					ALTER TABLE FlowEventTriggerParameters
					ADD FOREIGN KEY
					(TriggerId)
					REFERENCES FlowEventTrigger(Id);
				</prop>

				<prop key="create.configuration">CREATE TABLE Configuration
					(
					ConfigurationId
					VARCHAR(256) NOT NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					);

					CREATE UNIQUE INDEX Configuration01u ON
					Configuration(ConfigurationId);
				</prop>

				<prop key="create.configurationParameter">CREATE TABLE ConfigurationParameter
					(
					Id IDENTITY NOT NULL,
					ConfigurationIdentifier VARCHAR(256) NOT NULL,
					PositionRef
					NUMERIC NOT NULL
					);
					CREATE UNIQUE INDEX ConfigurationParameter01u ON
					ConfigurationParameter(ConfigurationIdentifier, PositionRef);
				</prop>

				<prop key="create.confParamBoolean">CREATE TABLE ConfParamBoolean
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value BOOLEAN DEFAULT 0,
					Description
					VARCHAR(256) DEFAULT NULL NULL
					);
					CREATE UNIQUE INDEX
					ConfParamBoolean01u ON ConfParamBoolean(Id)
				</prop>

				<prop key="create.confParamInteger">CREATE TABLE ConfParamInteger
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value NUMERIC DEFAULT NULL NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					);
					CREATE UNIQUE INDEX
					ConfParamInteger01u ON ConfParamInteger(Id);
				</prop>

				<prop key="create.confParamList">
					CREATE TABLE ConfParamList
					(
					Id NUMERIC NOT NULL,
					Name
					VARCHAR(128) NOT NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					);
					CREATE UNIQUE INDEX ConfParamList01u ON ConfParamList(Id);
				</prop>

				<prop key="create.confParamListString">
					CREATE TABLE ConfParamListString
					(
					Id NUMERIC NOT NULL,
					PositionRef NUMERIC NOT NULL,
					Value TEXT DEFAULT NULL NULL
					);
					CREATE
					UNIQUE INDEX ConfParamListString01u ON ConfParamListString(Id,
					PositionRef);
				</prop>

				<prop key="create.confParamLong">
					CREATE TABLE ConfParamLong
					(
					Id NUMERIC NOT NULL,
					Name
					VARCHAR(128) NOT NULL,
					Value NUMERIC DEFAULT NULL NULL,
					Description
					VARCHAR(256) DEFAULT NULL NULL
					);
					CREATE UNIQUE INDEX
					ConfParamLong01u ON ConfParamLong(Id);
				</prop>

				<prop key="create.confParamMap">
					CREATE TABLE ConfParamMap
					(
					Id NUMERIC NOT NULL,
					Name
					VARCHAR(128) NOT NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					);
					CREATE UNIQUE INDEX ConfParamMap01u ON ConfParamMap(Id);
				</prop>

				<prop key="create.confParamMapString">
					CREATE TABLE ConfParamMapString
					(
					Id NUMERIC NOT NULL,
					MapKey VARCHAR(256) NOT NULL,
					Value TEXT DEFAULT NULL NULL
					);
					CREATE
					UNIQUE INDEX ConfParamMapString01u ON ConfParamMapString(Id,
					MapKey);
				</prop>

				<prop key="create.confParamString">
					CREATE TABLE ConfParamString
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value TEXT DEFAULT NULL NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					);
					CREATE UNIQUE INDEX
					ConfParamString01u ON ConfParamString(Id);
				</prop>
				
				<prop key="create.confParamMaskedString">
					CREATE TABLE ConfParamMaskedString
					(
					Id NUMERIC NOT NULL,
					Name VARCHAR(128) NOT NULL,
					Value TEXT DEFAULT NULL NULL,
					Description VARCHAR(256) DEFAULT NULL NULL
					);
					CREATE UNIQUE INDEX
					ConfParamMaskedString01u ON ConfParamMaskedString(Id);
				</prop>

				<prop key="create.systemEvent">CREATE TABLE SystemEvent
					(
					Id IDENTITY NOT NULL,
					Subject VARCHAR(128) NOT NULL,
					Action VARCHAR(512) NOT NULL,
					Actor
					VARCHAR(64) NULL,
					Timestamp DATETIME NOT NULL,
					Expiry DATETIME NULL
					);
					CREATE UNIQUE INDEX SystemEvent01u ON SystemEvent(Id);
				</prop>

				<prop key="create.moduleStartup">CREATE TABLE StartupControl
					(
					Id IDENTITY NOT NULL,
					ModuleName VARCHAR(128) NOT NULL,
					FlowName VARCHAR(128) NOT NULL,
					StartupType VARCHAR(16) NOT NULL,
					Comment VARCHAR(256) NULL
					);
					CREATE
					UNIQUE INDEX StartupControl01u ON StartupControl(Id);
				</prop>

				<prop key="create.consoleModule">CREATE TABLE Module
					(
					Id IDENTITY NOT NULL PRIMARY KEY,
					Name VARCHAR(255) NOT NULL,
					Description VARCHAR(255) NOT NULL,
					DesignDiagramURL VARCHAR(255) NULL,
					UNIQUE (Name)
					);
				</prop>

				<prop key="create.consolePointToPointFlowProfile">CREATE TABLE PointToPointFlowProfile
					(
					Id IDENTITY NOT
					NULL PRIMARY KEY,
					Name VARCHAR(255) NOT NULL
					);
				</prop>

				<prop key="create.consolePointToPointFlow">CREATE TABLE PointToPointFlow
					(
					Id IDENTITY NOT NULL
					PRIMARY KEY,
					PointToPointFlowProfileId NUMERIC NOT NULL,
					FromModuleId NUMERIC NULL,
					ToModuleId NUMERIC NULL,
					CONSTRAINT
					PTPP_ID_FK FOREIGN KEY(PointToPointFlowProfileId) REFERENCES
					PointToPointFlowProfile(Id)
					);
				</prop>

				<prop key="create.exclusionEvent">CREATE TABLE ExclusionEvent
					(
                    Id IDENTITY NOT NULL PRIMARY KEY,
                    ModuleName VARCHAR(255) NOT NULL,
                    FlowName VARCHAR(255) NOT NULL,
                    Identifier VARCHAR(255) NOT NULL,
                    Event BINARY NULL,
                    ErrorUri VARCHAR(255) NOT NULL,
					Timestamp NUMERIC DEFAULT 0 NOT NULL,
					Expiry NUMERIC NULL
					);

					CREATE UNIQUE INDEX IkasanExclusionEvent01u ON
					ExclusionEvent(Id,ModuleName,FlowName,Identifier)
				</prop>

				<prop key="create.users">CREATE TABLE Users
					(
					Id IDENTITY NOT NULL PRIMARY KEY,
					Username VARCHAR(50) NOT NULL UNIQUE,
					Password VARCHAR(50) NOT NULL,
					Email VARCHAR(255) NULL,
					FirstName			VARCHAR(50) NULL,
					Surname				VARCHAR(50) NULL,
					Department			VARCHAR(50) NULL,
					Enabled BIT NOT NULL,
					PreviousAccess NUMERIC DEFAULT 0 NOT NULL
					);
				</prop>
				
				<prop key="create.authorities">CREATE TABLE Authorities
					(
					Id IDENTITY NOT NULL PRIMARY
					KEY,
					Authority VARCHAR(50) NOT NULL UNIQUE,
					Description VARCHAR(512)
					);
				</prop>

				<prop key="create.usersAuthorities">CREATE TABLE UsersAuthorities
					(
					UserId NUMERIC NOT
					NULL,
					AuthorityId NUMERIC NOT NULL,
					PRIMARY KEY (UserId,AuthorityId),
					CONSTRAINT USER_AUTH_USER_FK FOREIGN KEY(UserId) REFERENCES
					Users(Id),
					CONSTRAINT USER_AUTH_AUTH_FK FOREIGN KEY(AuthorityId)
					REFERENCES
					Authorities(Id)
					);
				</prop>

				<prop key="create.defaultAuthorities">INSERT INTO Authorities ( Authority, Description )
					VALUES ( 'ROLE_USER', 'Users who may log into the system' );
					INSERT
					INTO Authorities ( Authority, Description )
					VALUES ( 'ROLE_ADMIN',
					'Users who may perform administration functions on
					the system' );
				</prop>

				<prop key="create.version">CREATE TABLE Version
					(
					Id IDENTITY NOT NULL PRIMARY
					KEY,
					Component VARCHAR(256) NOT NULL UNIQUE,
					Release VARCHAR(256)
					NULL
					);
				</prop>


				<prop key="create.version.entry">INSERT INTO Version ( Component, Release )
					VALUES (
					'ikasan', '1.0.0' );
				</prop>

				<prop key="create.defaultAdminUser">set @authorityUserId = select Id from Authorities
					where Authority = 'ROLE_USER';
					set @authorityAdminId = select Id
					from Authorities where Authority =
					'ROLE_ADMIN';

					set @username =
					'admin';

					INSERT INTO Users ( Username, Password, Enabled, FirstName, Surname )
					VALUES (
					@username, 'd033e22ae348aeb5660fc2140aec35850c4da997', 1 , 'Admin', 'User');
					set
					@userId = select Id from Users where Username = @username;

					INSERT
					INTO UsersAuthorities values ( @userId, @authorityUserId );
					INSERT
					INTO UsersAuthorities values ( @userId, @authorityAdminId );
				</prop>

				<prop key="find.anyAdminUser">SELECT * FROM UsersAuthorities</prop>
				
				<prop key="find.usersTableExists">SELECT * from Users</prop>
				<prop key="get.ikasan.version">SELECT Release FROM Version where Component =
					'ikasan';
				</prop>
				
				<!--  Tables required for the security module -->
				<prop key="create.securityPrincipal">CREATE TABLE SecurityPrincipal
					(
					   Id               	IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		   UNIQUE NOT NULL,
					   PrincipalType		VARCHAR(256)		    NOT NULL,
					   Description			VARCHAR(1024)		    NOT NULL,
					   CreatedDateTime      DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id) 
					);
				</prop>
				<prop key="create.securityRole">CREATE TABLE SecurityRole
					(
					   Id               	IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		       UNIQUE NOT NULL,
					   Description	     	VARCHAR(1024)		   	   NOT NULL,
					   CreatedDateTime      DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id)
					);
				</prop>
				<prop key="create.policyLinkType">CREATE TABLE PolicyLinkType
					(
					   Id             				NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) UNIQUE NOT NULL,
					   TableName		      		VARCHAR(256) UNIQUE NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id)
					);
				</prop>
				<prop key="create.policyLink">CREATE TABLE PolicyLink
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   PolicyLinkTypeId     		NUMERIC(18, 0) NOT NULL,
					   TargetId         			NUMERIC(18, 0) NOT NULL,
					   Name				      		VARCHAR(256) NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id),
					   FOREIGN KEY (PolicyLinkTypeId) REFERENCES PolicyLinkType(Id)
					);
				</prop>
				<prop key="create.securityPolicy">CREATE TABLE SecurityPolicy
					(
					   Id               				NUMERIC(18, 0) IDENTITY NOT NULL,
					   PolicyLinkId               		NUMERIC(18, 0) NULL,
					   Name		      					VARCHAR(256) UNIQUE NOT NULL,
					   Description	     				VARCHAR(1024)		   	   NOT NULL,
					   CreatedDateTime      			DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      			DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id), 
					   FOREIGN KEY (PolicyLinkId) REFERENCES PolicyLink(Id) 
					);
				</prop>
				<prop key="create.userPrincipal">CREATE TABLE UserPrincipal
					(
					   UserId         				NUMERIC(18, 0) NOT NULL,
					   PrincipalId               	NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (UserId, PrincipalId), 
					   FOREIGN KEY (PrincipalId) REFERENCES SecurityPrincipal(Id),
					   FOREIGN KEY (UserId) REFERENCES Users(Id)
					);
				</prop>
				<prop key="create.principalRole">CREATE TABLE PrincipalRole
					(
					   PrincipalId               	NUMERIC(18, 0) NOT NULL,
					   RoleId         				NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (PrincipalId, RoleId),
					   FOREIGN KEY (PrincipalId) REFERENCES SecurityPrincipal(Id),
					   FOREIGN KEY (RoleId) REFERENCES SecurityRole(Id)
					);
				</prop>
				<prop key="create.rolePolicy">CREATE TABLE RolePolicy
					(
					   RoleId               	    NUMERIC(18, 0) NOT NULL,
					   PolicyId               	    NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (RoleId, PolicyId), 
					   FOREIGN KEY (PolicyId) REFERENCES SecurityPolicy(Id),
					   FOREIGN KEY (RoleId) REFERENCES SecurityRole(Id)
					);
				</prop>				
				
				<!-- Tables required for the ikasan mapping module -->
				<prop key="create.mappingConfigurationType">CREATE TABLE MCSConfigurationType
					(
					   Id               	NUMERIC(18, 0) 		   IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		   UNIQUE NOT NULL,
					   CreatedDateTime      DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id)
					);
				</prop>
				<prop key="create.mappingConfigurationContext">CREATE TABLE MCSConfigurationContext
					(
					   Id               	NUMERIC(18, 0) 		   IDENTITY NOT NULL,
					   Name		      		VARCHAR(256)		   UNIQUE NOT NULL,
					   Description	      	VARCHAR(1024)		   NOT NULL,
					   CreatedDateTime      DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id) 
					);
				</prop>
				<prop key="create.mappingConfigurationClient">CREATE TABLE MCSConfigServiceClient
					(
					   Id               				NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name		      			VARCHAR(256) UNIQUE NOT NULL,
					   KeyLocationQueryProcessorType		VARCHAR(256) NOT NULL,
					   CreatedDateTime      			DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      			DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id) 
					);
				</prop>
				<prop key="create.mappingConfiguration">CREATE TABLE MCSMappingConfiguration
					(
					   Id               	  		NUMERIC(18, 0) IDENTITY NOT NULL,
					   SourceContextId         		NUMERIC(18, 0) NOT NULL,
					   TargetContextId         		NUMERIC(18, 0) NOT NULL,
					   NumberOfParams       		NUMERIC(18, 0) NOT NULL,
					   Description         			VARCHAR(1024) NOT NULL,
					   ConfigurationTypeId  		NUMERIC(18, 0) NOT NULL,
					   ConfigurationServiceClientId  	NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id), 
					   FOREIGN KEY (ConfigurationTypeId) REFERENCES MCSConfigurationType(Id),
					   FOREIGN KEY (ConfigurationServiceClientId) REFERENCES MCSConfigServiceClient(Id),
					   FOREIGN KEY (SourceContextId) REFERENCES MCSConfigurationContext(Id),
					   FOREIGN KEY (TargetContextId) REFERENCES MCSConfigurationContext(Id)
					);
				</prop>
				<prop key="create.mappingTargetValue">CREATE TABLE MCSTargetConfigValue
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   TargetSystemValue    		VARCHAR(256) NOT NULL,   
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id) 
					);
				</prop>
				<prop key="create.mappingSourceValue">CREATE TABLE MCSSourceConfigValue
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   SourceSystemValue    		VARCHAR(256) NOT NULL,
					   MappingConfigurationId		NUMERIC(18, 0) NOT NULL,
					   TargetConfigurationValueId   NUMERIC(18, 0) NOT NULL,
					   SourceConfigGroupId          NUMERIC(18, 0) NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id), 
					   FOREIGN KEY (MappingConfigurationId) REFERENCES MCSMappingConfiguration(Id),
					   FOREIGN KEY (TargetConfigurationValueId) REFERENCES MCSTargetConfigValue(Id)
					);
				</prop>
				<prop key="create.mappingKeyLocationQuery">CREATE TABLE MCSKeyLocationQuery
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   Value			    		VARCHAR(256) NOT NULL,
					   MappingConfigurationId    	NUMERIC(18, 0) NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id), 
					   FOREIGN KEY (MappingConfigurationId) REFERENCES MCSMappingConfiguration(Id),
					);
				</prop>
				<prop key="create.mappingSourceConfigGroupSeq">CREATE TABLE MCSSourceConfigGroupSeq
					(
					   Id               NUMERIC(18, 0) IDENTITY NOT NULL,
					   SequenceNumber   NUMERIC(20, 0) NULL,
					   PRIMARY KEY (Id) 
					);
				</prop>

                <prop key="create.checksumCommand">CREATE TABLE FTChecksumCommand
                    (
                    Id                   NUMERIC(18,0) IDENTITY NOT NULL,
                    Destructive          BOOLEAN NOT NULL,
                    ChecksumFilePath     VARCHAR(255) NULL,
                    PRIMARY KEY (Id)
                    );
                </prop>

                <prop key="create.cleanupChunksCommand">CREATE TABLE FTCleanupChunksCommand
                    (
                    Id                  NUMERIC(18,0) IDENTITY NOT NULL,
                    FileChunkHeaderId   NUMERIC(18,0) NULL,
                    PRIMARY KEY (Id)
                    );
                </prop>

                <prop key="create.deliverBatchCommand">CREATE TABLE FTDeliverBatchCommand
                    (
                    Id                     NUMERIC(18,0) IDENTITY NOT NULL,
                    OutputDirectory        VARCHAR(255) NULL,
                    TempDirectory          VARCHAR(255) NULL,
                    BatchFolder            VARCHAR(255) NULL,
                    PutAttempted           BOOLEAN NOT NULL,
                    PRIMARY KEY (Id)
                    );
                </prop>

                <prop key="create.deliverFileCommand">CREATE TABLE FTDeliverFileCommand
                    (
                    Id                     NUMERIC(18,0) IDENTITY NOT NULL,
                    FileName               VARCHAR(255) NULL,
                    TempFileName           VARCHAR(255) NULL,
                    OutputDirectory        VARCHAR(255) NULL,
                    OverwriteExisting      BOOLEAN NOT NULL,
                    PutAttempted           BOOLEAN NOT NULL,
                    PRIMARY KEY (Id)
                    );
                </prop>

                <prop key="create.fileChunkHeader">CREATE TABLE FTFileChunkHeader
                    (
                    Id              NUMERIC(18,0) IDENTITY NOT NULL,
                    SequenceLength  NUMERIC(18,0) NOT NULL,
                    InternalMd5Hash  CHAR(32) NULL,
                    ExternalMd5Hash  CHAR(32) NULL,
                    FileName        VARCHAR(255) NOT NULL,
                    ChunkTimeStamp  NUMERIC(18,0) NOT NULL,
                    ClientId  VARCHAR(255) NULL,
                    PRIMARY KEY (Id)
                    );
                </prop>

                <prop key="create.fileChunk">CREATE TABLE FTFileChunk
                    (
                    Id              NUMERIC(18,0) IDENTITY NOT NULL,
                    Content         BINARY  NOT NULL,
                    Ordinal         NUMERIC(18,0) NOT NULL,
                    Md5Hash  		CHAR(32) NULL,
                    FileChunkHeaderId NUMERIC(18,0) NOT NULL,
                    PRIMARY KEY (Id) ,
                    FOREIGN KEY (FileChunkHeaderId) REFERENCES FTFileChunkHeader(Id)
                    )
                </prop>

                <prop key="create.fileFilter">CREATE TABLE FTFileFilter
                    (
                    Id              NUMERIC(18,0) IDENTITY NOT NULL,
                    ClientId        VARCHAR(255)  NOT NULL,
                    Criteria        VARCHAR(512)  NOT NULL,
                    LastModified    datetime      NOT NULL,
                    LastAccessed    datetime      NOT NULL,
                    Size            NUMERIC(18,0) NOT NULL,
                    CreatedDateTime NUMERIC(18, 0) NOT NULL,
                    PRIMARY KEY (Id),
                    );
                    CREATE UNIQUE INDEX FTFileFilter02u
                    ON FTFileFilter(ClientId,Criteria,LastModified,Size);
                    CREATE INDEX FTFileFilter03u
                    ON FTFileFilter(ClientId,CreatedDateTime);
                </prop>

                <prop key="create.retrieveFileCommand">CREATE TABLE FTRetrieveFileCommand
                    (
                    Id                   NUMERIC(18,0) IDENTITY NOT NULL,
                    Destructive          BOOLEAN NOT NULL,
                    RenameOnSuccess      BOOLEAN NOT NULL,
                    RenameExtension      VARCHAR(255) NULL,
                    MoveOnSuccess        BOOLEAN NOT NULL,
                    MoveNewPath          VARCHAR(255) NULL,
                    SourcePath           VARCHAR(255) NULL,
                    PRIMARY KEY (Id)
                    );
                </prop>

                <prop key="create.xid">CREATE TABLE FTXid
                    (
                    Id                   NUMERIC(18,0) IDENTITY NOT NULL,
                    State                VARCHAR(255)  NOT NULL,
                    GlobalTransactionId  VARCHAR(255)  NOT NULL,
                    BranchQualifier      VARCHAR (255)  NOT NULL,
                    FormatId             NUMERIC(18,0)  NOT NULL,
                    ClientId             VARCHAR(255)  NOT NULL,
                    CreatedDateTime  	 NUMERIC(18,0) NOT NULL,
                    LastUpdatedDateTime  NUMERIC(18,0) NOT NULL,
                    PRIMARY KEY (Id)
                    );
                    CREATE UNIQUE INDEX FTXid02u
                    ON FTXid(GlobalTransactionId, BranchQualifier)
                </prop>

                <prop key="create.transactionalResourceCommand">CREATE TABLE FTTransactionalResourceCommand
                    (
                    Id              NUMERIC(18,0) IDENTITY NOT NULL,
                    State           VARCHAR(255)  NOT NULL,
                    Xid_Id 			NUMERIC(18,0) NOT NULL,
                    Type            VARCHAR(255)  NOT NULL,
                    ExecutionTimestamp CHAR(24) NULL,
                    PRIMARY KEY (Id),
                    FOREIGN KEY (Xid_Id) REFERENCES FTXid(Id)
                    );
                </prop>
				
				<prop key="create.authenticationMethod">CREATE TABLE AuthenticationMethod
					(
					   Id               			NUMERIC(18, 0) IDENTITY NOT NULL,
					   Name    		          		VARCHAR(128) NOT NULL,
					   Method    		          	VARCHAR(128) NOT NULL,
					   AuthOrder					NUMERIC(18,0) NOT NULL,
					   LastSynchronised      		DATETIME NULL,
					   Enabled      				BIT DEFAULT 1,
					   LdapServerUrl    		  	VARCHAR(256) NULL,
					   LdapBindUserDn		      	VARCHAR(256) NULL,
					   LdapBindUserPassword   		VARCHAR(256) NULL,
					   LdapUserSearchBaseDn   		VARCHAR(256) NULL,
					   LdapUserSearchFilter   		VARCHAR(256) NULL,
					   EmailAttributeName 			VARCHAR(256) NULL,
					   UserAccNameAttributeName 	VARCHAR(256) NULL,
					   AccountTypeAttributeName   	VARCHAR(256) NULL,
					   AppSecBaseDn   				VARCHAR(256) NULL,
					   AppSecGroupAttributeName 	VARCHAR(256) NULL,
					   FirstNameAttributeName 		VARCHAR(256) NULL,
					   SurnameAttributeName 		VARCHAR(256) NULL,
					   DepartmentAttributeName	 	VARCHAR(256) NULL,
					   AppSecDescAttributeName		VARCHAR(256) NULL,
					   LdapUserDescAttributeName	VARCHAR(256) NULL,
					   MemberofAttributeName		VARCHAR(256) NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id)
					);
				</prop>
				
				<!--  Topology Service Tables -->
                <prop key="create.server">CREATE TABLE Server
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 		UNIQUE NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   Url		      				VARCHAR(256) 		NOT NULL,
					   Port							NUMERIC(18, 0) 		NOT NULL,
					   CreatedDateTime      		DATETIME 			default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME 			default current_date() NOT NULL,
					   PRIMARY KEY (Id)
					);
                </prop>
                
                <prop key="create.ikasanModule">CREATE TABLE IkasanModule
                    (
                    Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
                    Name		      			VARCHAR(256) 		UNIQUE NOT NULL,
                    ContextRoot     			VARCHAR(256) 		NOT NULL,
                    Description		      		VARCHAR(1024) 		NOT NULL,
                    DiagramUrl      			VARCHAR(256) 		NULL,
                    Version						VARCHAR(256) 		NULL,
                    ServerId					NUMERIC(18, 0) 		NULL,
                    CreatedDateTime      		DATETIME 			default current_date() NOT NULL,
                    UpdatedDateTime      		DATETIME 			default current_date() NOT NULL,
                    PRIMARY KEY (Id)
					);
                </prop>
                
                <prop key="create.flow">CREATE TABLE Flow
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 	    NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   ModuleId						NUMERIC(18, 0) 		NOT NULL,
					   CreatedDateTime      		DATETIME 			default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME 			default current_date() NOT NULL,
					   PRIMARY KEY (Id),
					   FOREIGN KEY (ModuleId) REFERENCES IkasanModule(Id)
					);
                </prop>
                
                <prop key="create.component">CREATE TABLE Component
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 	    NOT NULL,
					   Description		      		VARCHAR(1024) 		NOT NULL,
					   IsConfigurable 				BIT DEFAULT 0,
					   FlowId						NUMERIC(18, 0) 		NULL,
					   ComponentOrder				NUMERIC(18, 0) 		NULL,
					   ConfigurationId				VARCHAR(256) 		NULL,
					   CreatedDateTime      		DATETIME 			default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME 			default current_date() NOT NULL,
					   PRIMARY KEY (Id)
					);
                </prop>
                
                <prop key="create.businessStream">CREATE TABLE BusinessStream
					(
					   Id             				NUMERIC(18, 0) 	IDENTITY NOT NULL,
					   Name		      				VARCHAR(256) 	UNIQUE NOT NULL,
					   Description		      		VARCHAR(1024) 	NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (Id)
					);
                </prop>
                
                <prop key="create.businessStreamFlow">CREATE TABLE BusinessStreamFlow
					(
					   BusinessStreamId				NUMERIC(18, 0) 	NOT NULL,
					   FlowId						NUMERIC(18, 0) 	NOT NULL,
					   FlowOrder					NUMERIC(18, 0) 	NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (BusinessStreamId, FlowId),
					   FOREIGN KEY (BusinessStreamId) REFERENCES BusinessStream(Id),
					   FOREIGN KEY (FlowId) REFERENCES Flow(Id)
					);
                </prop>
                
                <prop key="create.userBusinessStream">CREATE TABLE UserBusinessStream
					(
					   UserId						NUMERIC(18, 0) 	NOT NULL,
					   BusinessStreamId				NUMERIC(18, 0) 	NOT NULL,
					   CreatedDateTime      		DATETIME default current_date() NOT NULL,
					   UpdatedDateTime      		DATETIME default current_date() NOT NULL,
					   PRIMARY KEY (UserId, BusinessStreamId),
					   FOREIGN KEY (UserId) REFERENCES Users(Id),
					   FOREIGN KEY (BusinessStreamId) REFERENCES BusinessStream(Id)
					);
                </prop>
                
                <!--  Hospital Service Tables -->
                <prop key="create.exclusionEventAction">CREATE TABLE ExclusionEventAction
					(
					   Id             				NUMERIC(18, 0) 		IDENTITY NOT NULL,
					   ErrorUri	      				VARCHAR(256) 		UNIQUE NOT NULL,
					   ModuleName		      		VARCHAR(256) 		NOT NULL,
					   FlowName		      			VARCHAR(256) 		NOT NULL,
					   ActionedBy		      		VARCHAR(256) 		NOT NULL,
					   Action		      			VARCHAR(32) 		NOT NULL,
					   Event		      			IMAGE 				NOT NULL,
					   Timestamp		      		NUMERIC(18, 0)       NOT NULL,
					   PRIMARY KEY (Id)
					);
                </prop>
				
				<prop key="create.defaultPrincipal">
					
					INSERT INTO 
					SecurityPrincipal ( Name, PrincipalType, Description )
					VALUES ( 'admin', 'user', 'This administrator user');
					
					set @securityPrincipalId = select Id 
					from SecurityPrincipal 
					where Name = 'admin';
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'ADMIN',
					'Users who may perform administration functions on
					the system' );
					
					set @securityRoleId = select Id 
					from SecurityRole 
					where Name = 'ADMIN';
					
					set @userId = select Id from Users where Username = 'admin';
					
					INSERT
					INTO UserPrincipal ( UserId, PrincipalId )
					VALUES ( @userId, @securityPrincipalId );
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'ALL', 'Policy to do everything' );
					
					set @securityPolicyId = select Id 
					from SecurityPolicy 
					where Name = 'ALL';
					
					INSERT
					INTO PrincipalRole ( PrincipalId, RoleId )
					VALUES ( @securityPrincipalId, @securityRoleId );
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );
					
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'User',
					'Users who have a read only view on the system' );
					
					set @securityRoleId = select Id 
					from SecurityRole 
					where Name = 'User';
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'Read Only', 'Read only policy' );
					
					set @securityPolicyId = select Id 
					from SecurityPolicy 
					where Name = 'Read Only';
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );

					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'COP Stream Administrator',
					'Cash Operations Stream Administrators' );
					
					set @securityRoleId = select Id 
					from SecurityRole 
					where Name = 'COP Stream Administrator';
					
					set @securityPolicyId =  select Id 
					from SecurityPolicy 
					where Name = 'Read Only';
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Control', 'Ability to control COP flows' );

					set @securityPolicyId = select Id 
					from SecurityPolicy 
					where Name = 'COP Control';
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Wiretap', 'Ability to view COP wiretaps' );

					set @securityPolicyId = select Id 
					from SecurityPolicy 
					where Name = 'COP Wiretap';
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );
					
					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Errors', 'View COP errors' );

					set @securityPolicyId = select Id 
					from SecurityPolicy 
					where Name = 'COP Errors';
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Replay', 'Policy to replay COP data' );

					set @securityPolicyId = select Id 
					from SecurityPolicy 
					where Name = 'COP Replay';
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );

					INSERT
					INTO SecurityPolicy ( Name, Description )
					VALUES ( 'COP Hospital', 'Policy to use the hospital for COP data' );

					set @securityPolicyId = select Id 
					from SecurityPolicy 
					where Name = 'COP Hospital';
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );
					
					INSERT
					INTO SecurityRole ( Name, Description )
					VALUES ( 'COP Stream User',
					'Cash Operations Stream User' );
					
					set @securityRoleId = select Id 
					from SecurityRole 
					where Name = 'COP Stream User';
					
					set @securityPolicyId = select Id 
					from SecurityPolicy 
					where Name = 'COP Wiretap';
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );
					

					set @securityPolicyId = select Id 
					from SecurityPolicy 
					where Name = 'COP Errors';
					
					INSERT
					INTO RolePolicy ( RoleId, PolicyId )
					VALUES ( @securityRoleId,  @securityPolicyId );
					
					INSERT
					INTO PolicyLinkType ( Name, TableName )
					VALUES ( 'Mapping Configuration',  'MCSMappingConfiguration' );
				
				</prop>
				
			</props>

		</property>
	</bean>
</beans>