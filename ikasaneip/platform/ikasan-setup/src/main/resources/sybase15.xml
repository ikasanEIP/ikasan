<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <!-- connection properties -->
    <!--entry key="driver">com.sybase.jdbc4.jdbc.SybDataSource</entry-->
    <!--entry key="url">jdbc:sybase:Tds:HOSTNAME:PORT/DATABASE</entry-->
    <entry key="driver">net.sourceforge.jtds.jdbc.Driver</entry>
    <entry key="url">jdbc:jtds:sybase://HOSTNAME:PORT/DATABASE</entry>

    <!-- Wiretap Table creation -->
    <entry key="create.wiretap.table">CREATE TABLE IkasanWiretap
        (
        Id                  NUMERIC IDENTITY NOT NULL,
        ModuleName          VARCHAR(128)  NOT NULL,
        FlowName            VARCHAR(128)  NOT NULL,
        ComponentName       VARCHAR(128)  NOT NULL,
        EventId             VARCHAR(255)  NOT NULL,
        RelatedEventId      VARCHAR(255)  NULL,
        EventTimestamp      NUMERIC DEFAULT 0 NOT NULL,
        PayloadContent      TEXT    NOT NULL,
        CreatedDateTime     NUMERIC NOT NULL,
        Expiry              NUMERIC NOT NULL
        )
        LOCK DATAROWS
        WITH IDENTITY_GAP=1

        CREATE UNIQUE INDEX IkasanWiretap01u ON IkasanWiretap(Id)</entry>

    <entry key="create.flowEventTrigger.table">CREATE TABLE FlowEventTrigger
        (
        Id                  NUMERIC IDENTITY NOT NULL,
        ModuleName          VARCHAR(128)  NOT NULL,
        FlowName            VARCHAR(128)  NOT NULL,
        Relationship        VARCHAR(32)  NOT NULL,
        FlowElementName     VARCHAR(128),
        JobName           	VARCHAR(64)   NOT NULL
        )
        LOCK DATAROWS
        WITH IDENTITY_GAP=1

        CREATE UNIQUE INDEX FlowEventTrigger01u ON FlowEventTrigger(Id)</entry>

    <entry key="create.flowEventTriggerParameters.table">CREATE TABLE FlowEventTriggerParameters
        (
        TriggerId          NUMERIC NOT NULL,
        ParamName          VARCHAR(128)  NOT NULL,
        ParamValue            VARCHAR(128)
        )
        ALTER TABLE FlowEventTriggerParameters
        ADD CONSTRAINT FlowEventTriggerParam_Id_FK
        FOREIGN KEY (TriggerId)
        REFERENCES FlowEventTrigger (Id)
    </entry>

    <!-- Configuration Table creation -->
    <entry key="create.configuration.table">CREATE TABLE Configuration
        (
        ConfigurationId         VARCHAR(256) NOT NULL,
        Description             VARCHAR(256) DEFAULT NULL NULL
        )
        LOCK DATAROWS
        WITH IDENTITY_GAP=1

        CREATE UNIQUE INDEX Configuration01u ON Configuration(ConfigurationId)
    </entry>

    <entry key="create.configurationParameter.table">CREATE TABLE ConfigurationParameter
        (
        ConfigurationIdentifier     VARCHAR(256) NOT NULL,
        PositionRef                 NUMERIC,
        Name                        VARCHAR(128) NOT NULL,
        Value                       VARCHAR(256) DEFAULT NULL NULL,
        Description                 VARCHAR(256) DEFAULT NULL NULL
        )
        LOCK DATAROWS
        WITH IDENTITY_GAP=1

        CREATE UNIQUE INDEX ConfigurationParameter01u ON ConfigurationParameter(ConfigurationIdentifier, PositionRef)
    </entry>

    <entry key="create.moduleStartup.table">CREATE TABLE StartupControl
        (
        Id                  NUMERIC IDENTITY NOT NULL,
        ModuleName          VARCHAR(128)  NOT NULL,
        FlowName            VARCHAR(128)  NOT NULL,
        StartupType         VARCHAR(16)   NOT NULL,
        Comment             VARCHAR(256)  NULL
        )
        LOCK DATAROWS
        WITH IDENTITY_GAP=1

        CREATE UNIQUE INDEX StartupControl01u ON StartupControl(Id)</entry>

    <entry key="create.consoleModule.table">CREATE TABLE Module(
        Id               NUMERIC IDENTITY NOT NULL PRIMARY KEY,
        Name             VARCHAR(255) NOT NULL,
        Description      VARCHAR(255) NOT NULL,
        DesignDiagramURL VARCHAR(255) NULL,
        UNIQUE (Name)
        )</entry>
    <entry key="create.consolePointToPointFlowProfile.table">CREATE TABLE PointToPointFlowProfile(
        Id          NUMERIC IDENTITY NOT NULL PRIMARY KEY,
        Name        VARCHAR(255) NOT NULL
        )</entry>
    <entry key="create.consolePointToPointFlow.table">CREATE TABLE PointToPointFlow(
        Id                        NUMERIC IDENTITY NOT NULL PRIMARY KEY,
        PointToPointFlowProfileId NUMERIC NOT NULL,
        FromModuleId              NUMERIC NULL,
        ToModuleId                NUMERIC NULL,
        CONSTRAINT PTPP_ID_FK FOREIGN KEY(PointToPointFlowProfileId) REFERENCES PointToPointFlowProfile(Id)
        )</entry>

    <entry key="create.users.table">CREATE TABLE Users
        (
        Id       NUMERIC IDENTITY NOT NULL PRIMARY KEY,
        Username VARCHAR(50) NOT NULL UNIQUE,
        Password VARCHAR(50) NOT NULL,
        Email    VARCHAR(255) NULL,
        Enabled  BIT NOT NULL
        )
        LOCK DATAROWS
        WITH IDENTITY_GAP=1</entry>
    <entry key="create.authorities.table">CREATE TABLE Authorities
        (
        Id          NUMERIC IDENTITY NOT NULL PRIMARY KEY,
        Authority   VARCHAR(50) NOT NULL UNIQUE,
        Description VARCHAR(512)
        )
        LOCK DATAROWS
        WITH IDENTITY_GAP=1</entry>
    <entry key="create.usersAuthorities.table">CREATE TABLE UsersAuthorities
        (
        UserId NUMERIC NOT NULL,
        AuthorityId NUMERIC NOT NULL,
        PRIMARY KEY (UserId,AuthorityId),
        CONSTRAINT USER_AUTH_USER_FK FOREIGN KEY(UserId) REFERENCES Users(Id),
        CONSTRAINT USER_AUTH_AUTH_FK FOREIGN KEY(AuthorityId) REFERENCES Authorities(Id)
        )  </entry>
    <entry key="create.defaultAuthorities">INSERT INTO Authorities ( Authority, Description )
        VALUES ( 'ROLE_USER', 'Users who may log into the system' )
        INSERT INTO Authorities ( Authority, Description )
        VALUES ( 'ROLE_ADMIN', 'Users who may perform administration functions on the system' ) </entry>

    <entry key="create.defaultAdminUser">declare @authorityUserId numeric(18), @authorityAdminId numeric(18), @username varchar(50), @userId numeric(18)

        select @authorityUserId = Id from Authorities where Authority = 'ROLE_USER'
        select @authorityAdminId = Id from Authorities where Authority = 'ROLE_ADMIN'

        select @username = 'admin'

        INSERT INTO Users ( Username, Password, Enabled )
        VALUES ( @username, 'd033e22ae348aeb5660fc2140aec35850c4da997', 1 )
        select @userId = Id from Users where Username = @username

        INSERT INTO UsersAuthorities values ( @userId, @authorityUserId )
        INSERT INTO UsersAuthorities values ( @userId, @authorityAdminId )</entry>

</properties>