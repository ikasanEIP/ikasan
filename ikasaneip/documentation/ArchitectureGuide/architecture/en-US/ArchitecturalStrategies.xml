<!--
    ====================================================================
    Ikasan Enterprise Integration Platform

    Distributed under the Modified BSD License.
    Copyright notice: The copyright for this software and a full listing
    of individual contributors are as shown in the packaged copyright.txt
    file.

    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

     - Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.

     - Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.

     - Neither the name of the ORGANIZATION nor the names of its contributors may
       be used to endorse or promote products derived from this software without
       specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    =============================================================================
-->
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
	xml:id="ArchitecturalStrategies">
	<title>Architectural Strategies</title>
	<para>
        This chapter details the strategies laid out as guidelines for the design of the Ikasan Enterprise Integration Platform.
	</para>
	<section>
		<title>Commonality</title>
		<para>
			The nature of an integration platform is such that the integration
			requirements for string application are likely to be repeated, either in
			part or whole for subsequent application integration solutions. It would
			seem foolish to implement the same artefacts over and over again; or,
			in the case where requirements differ only slightly, distort the
			implementation of string to meet the requirements of others. This
			approach would not require many application integration solutions
			before the implementation became an unstable, tightly coupled mash of
			technologies.
			The requirement to provide similar services across a
			range of solutions
			must result in a common approach for each solution.
			This common approach must allow each integration solution’s
			requirements
			to be met, but in a standard approach utilising and
			extending
			existing common core functionality.
		</para>
	</section>
	<section>
		<title>Flexibility</title>
		<para>
			A common approach must allow for the integration of unknown entities
			and the provision of new services to support the future solutions.
			The integration of applications must be undertaken within a controlled,
			structured manner utilising common functionality, however, this
			cannot result in a rigid inflexible platform. The ability to adapt
			and accommodate new requirements is fundamental to the success of any
			integration platform.
        </para>
	</section>

	<section>
		<title>Robust and Guaranteed Operation</title>
		<para>
			All artefacts within the platform must operate within the bounds of
			maintaining delivery integrity. This ensures artefacts participating in any
			operation remain in a consistent state relative to each other
			regardless of the success or failure of that operation.
			This aspect of integrity can subsequently be leveraged to support
			automatic recovery and retry for artefacts within the platform.
			Without these operational bounds the platform will not be robust
			and cannot guarantee business data transport or coordination.
        </para>
	</section>

	<section>
		<title>Single Point of Integration</title>
		<para>
			Any integrated solution must be undertaken as a single
			logical entity. This entity can be seen as an extension of the
			application addressing any shortcomings of the application to
			present or receive business data in a guaranteed and consistent
			manner.
        </para>
	</section>

	<section>
		<title>Separation of Concerns</title>
		<para>
			All integration solutions must adhere to a well defined separation of concerns which do not unnecessarily bleed into each other.
        </para>

        <section>
            <title>Application Connectivity</title>
            <para>
                All integration solutions (for both the sourcing and distribution of data) must isolate
                the application specific aspects regarding connectivity (namely the application API/protocols). 
            </para>
        </section>

        <section>
            <title>Application Data Constructs</title>
            <para>
                Application specific data contructs containing the business data will be presented to and from the application. These contructs will
                exhibit syntax and semantics specific to the application integration. These must be resolved away from the application specifics to a common business
                form for sourced data and to the application specifics from a common business form for distributed data.
            </para>
        </section>

        <section>
            <title>Common Data Operations</title>
            <para>
                The common data (in terms of syntax and semantics) may require further "massage" and "value-add" in the form of 
                filtering, routing, extension, mapping, aggregation and/or splitting. These operations are higher level data operations than that 
                of the Application Data Contructs as the data is now operated on based on known business events.
            </para>
        </section>
        <section>
            <title>Business Event Services</title>
            <para>
                Business events exposed from source integration solutions or pushed to target integration solutions 
                are done so via well defined contracts for event exchange.
            </para>
        </section>
	</section>

	<section>
		<title>Loose Coupling</title>
		<para>
			All entities configured within the platform must be loosely coupled and
			exhibit loose dependencies in relation to each other.
			This is achieved through a defined public contract for entity
			interaction.
            </para>
	</section>

	<section>
		<title>Tight Cohesion</title>
		<para>
			Cohesion refers to the “degree of relatedness of services and/or operations”
			within an entity. It is important to have tight cohesion within the
			integration solutions to ensure that functionality is
			not unnecessarily distributed. Each solution should be self-contained
			and provide a defined contract for others wishing to use that
			service.
            </para>
	</section>

	<section>
		<title>Standard Open Technologies</title>
		<para>
			Each integration solution will require (a) specific knowledge
			of an application by the integration solution developers; 
			and (b) specific knowledge of the
			business nature of the data being transported by the business analysts.
			Given these two requirements, the platform should not bog
			the developers or business analysts down with vendor specific or
			little known technologies beyond their remit. To this end it is imperative that the
			technologies be widely used and, where possible, industry standard.
			This should allow any developer to focus on the application specific
			integration issues and re-use industry knowledge without being
			subject to a steep learning curve for the infrastructure.
		</para>
	</section>

	<section>
		<title>Standardisation through a Platform</title>
		<para>
			The use of a common platform is born out of the requirement for
			application integration and business orchestration to be
			standard, modular, and re-useable.
                </para>
		<section>
			<title>Modularity</title>
			<para>
				A common platform encourages modularity through encapsulation of
				related services and operations and exposing these as a well-defined
				contract between the solution and other entities.
                    </para>
		</section>

		<section>
			<title>Extensibility</title>
			<para>
				The platform should provision for the extensibility of services and
				operations by providing hooks allowing designed extensions of
				services for entity specific operations. 
                    </para>
		</section>

		<section>
			<title>Re-useability</title>
			<para>
				A platform can provide generic implementations of components which
				can subsequently be re-applied across solutions. This leverages
				the domain knowledge and prior effort of the generic implementation
				allowing the developer to concentrate on the specifics of the
				component being created.                    
				</para>
		</section>

		<section>
			<title>Inversion of Control</title>
			<para>
				The platform provides a run-time implementation characterised by an
				“inversion of control”. This essentially means that an integration
				solution runs within the control of the platform.
                </para>
		</section>

		<section>
			<title>Commoditised Solution</title>
			<para>
				The implementation of services within a platform is not infinite. Their
				operation and use can be well defined, therefore, it is possible to
				determine common patterns of usage with regard to application
				integration projects. Once common patterns are identified it is
				possible to create templates and commoditise solutions to reduce the
				development effort.
                </para>
		</section>
	</section>
</chapter>
