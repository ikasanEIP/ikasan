<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">



    
    <bean id="module"
        class="org.ikasan.framework.module.SimpleModule">
        <constructor-arg value="${module.name}" />
        <constructor-arg>
            <list>
            	<ref bean="channelAdapterFlowInitiator"/>
            	<ref bean="transformerFlowInitiator"/>
            	<ref bean="transformerFlowSimpleInitiator"/>
            </list>
        </constructor-arg>
        <property name="description">
            <value>This example module generates random German words, translates and routes them by type. </value>
        </property>
    </bean>

    
  <!-- =========================================================================== -->
  <!--                   Channel Adapter Flow Initiator                            -->
  <!-- =========================================================================== -->
  

  <bean id="channelAdapterFlowInitiator"
    class="org.ikasan.framework.initiator.scheduled.quartz.QuartzStatefulScheduledDrivenInitiator">
    <!-- initiator name -->
    <constructor-arg value="channelAdapterFlowInitiator"/>
    <!-- module name -->
    <constructor-arg value="${module.name}"/>
    <!-- event provider -->
    <constructor-arg ref="germanWordEventProvider"/>
    <!-- flow to invoke -->
    <constructor-arg ref="channelAdapterFlow"/>
    <!-- initiator exception handler -->
    <!-- <constructor-arg ref="exceptionHandler" /> -->
    <!-- <constructor-arg><null/></constructor-arg>-->
    <constructor-arg ref="loggingExceptionHandler"/>
        
     <property name="triggers">
	    <list>
	       <bean class="org.quartz.CronTrigger">
	           <property name="name" value="every10SecondsTrigger" />
	           <property name="cronExpression" value="0/10 * * * * ?" />
	       </bean>
	       <bean class="org.quartz.CronTrigger">
               <property name="name" value="every7SecondsTrigger" />
               <property name="cronExpression" value="0/7 * * * * ?" />
           </bean>
	    </list>
     </property>
    <property name="scheduler" ref="channelAdapterFlowScheduler"/>

    </bean>

  <bean id="channelAdapterFlowScheduler"
    class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
      <property name="schedulerName" value="german-channelAdapterFlowScheduler"/>
      <property name="jobFactory" ref="channelAdapterFlowJobFactory"/>
  </bean>

  <bean id="channelAdapterFlowJobFactory"
    class="org.ikasan.framework.initiator.scheduled.quartz.IkasanJobFactory">
     <constructor-arg ref="channelAdapterFlowInitiator"/>
  </bean>



  <!-- =========================================================================== -->
  <!--                   Transformer Flow Initiator                                -->
  <!-- =========================================================================== -->
  
    <bean id="transformerFlowInitiator" class="org.ikasan.framework.initiator.messagedriven.MessageDrivenInitiatorFactoryBean">
        <property name="moduleName" ref="moduleName"/>
        <property name="connectionFactory" ref="jmsConnectionFactory" />
       <!-- Using destinationName, and destinationResolver to allow late lookup of jms Destination-->
        <property name="destinationResolver" ref="jmsJndiDestinationResolver"/>
        <property name="destinationName" ref="germanWordTopicName" />
        <property name="transactionManager" ref="transactionManager"/>
        <property name="flow" ref="transformerFlow"/>
        <property name="eventDeserialiser" ref="jmsMessageEventSerialiser" />
    </bean>
    

    
    <bean id="transformerFlowSimpleInitiator" class="org.ikasan.framework.initiator.SimpleInitiator">
        <constructor-arg ref="moduleName"/>
        <constructor-arg ref="payloadFactory"/>
        <constructor-arg ref="transformerFlow"/>
    </bean>

</beans>