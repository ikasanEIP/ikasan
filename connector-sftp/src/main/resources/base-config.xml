<?xml version="1.0" encoding="UTF-8" ?>
<!-- 
# //
# //
# // $Id$
# // $URL$
# // 
# // ====================================================================
# // Ikasan Enterprise Integration Platform
# // Copyright (c) 2003-2008 Mizuho International plc. and individual contributors as indicated
# // by the @authors tag. See the copyright.txt in the distribution for a
# // full listing of individual contributors.
# //
# // This is free software; you can redistribute it and/or modify it
# // under the terms of the GNU Lesser General Public License as
# // published by the Free Software Foundation; either version 2.1 of
# // the License, or (at your option) any later version.
# //
# // This software is distributed in the hope that it will be useful,
# // but WITHOUT ANY WARRANTY; without even the implied warranty of
# // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# // Lesser General Public License for more details.
# //
# // You should have received a copy of the GNU Lesser General Public
# // License along with this software; if not, write to the 
# // Free Software Foundation Europe e.V. Talstrasse 110, 40217 Dusseldorf, Germany 
# // or see the FSF site: http://www.fsfeurope.org/.
# // ====================================================================
# //
# // Author:  Ikasan Development Team
# // 
-->
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>

	<!-- ###################### -->
	<!-- Datasource Definitions -->
	<!-- ###################### -->
  <bean id="frameworkDefaultNoTxDs" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:ikasan/framework/default/ds" />
  </bean>
  <bean id="frameworkDefaultLocalTxDs" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:ikasan/framework/defaultLocal/localds" />
  </bean>
  <bean id="frameworkDefaultXaTxDs" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:ikasan/framework/defaultXA/xads" />
  </bean>
  <!-- We lazily initialise as we don't always need large file support -->
  <bean id="connectorLargeNoTxDs" lazy-init="true" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:/ikasan/connector/file/ds" />
  </bean>

    <!-- ########################### -->
    <!-- Hibernate Session Factories -->
    <!-- ########################### -->
  <bean id="abstractHibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" abstract="true">
    <property name="mappingResources" ref="hibernateMappingResources" />
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.dialect">org.hibernate.dialect.SybaseDialect</prop>
        <prop key="hibernate.jdbc.use_get_generated_keys">false</prop>
      </props>
    </property>
  </bean>
  <bean id="xaTx-BaseFileTransferHibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" parent="abstractHibernateSessionFactory">
    <property name="dataSource" ref="frameworkDefaultXaTxDs" />
  </bean>
  <bean id="localTx-BaseFileTransferHibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" parent="abstractHibernateSessionFactory">
    <property name="dataSource" ref="frameworkDefaultLocalTxDs" />
  </bean>
  <bean id="noTx-BaseFileTransferHibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" parent="abstractHibernateSessionFactory">
    <property name="dataSource" ref="frameworkDefaultNoTxDs" />
  </bean>
  <!-- We lazily initialise as we don't always need large file support -->
  <bean id="fileChunkSessionFactory" lazy-init="true" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" parent="abstractHibernateSessionFactory">
    <property name="dataSource" ref="connectorLargeNoTxDs" />
  </bean>
  <bean id="hibernateMappingResources" class="java.util.ArrayList">
    <constructor-arg>
      <list>
        <value>FileFilter.hbm.xml</value>
        <value>TransactionalResourceCommand.hbm.xml</value>
        <value>XidImpl.hbm.xml</value>
        <value>FileChunk.hbm.xml</value>
        <value>FileChunkHeader.hbm.xml</value>
      </list>
    </constructor-arg>
  </bean>

    <!-- ############### -->
    <!-- DAO Definitions -->
    <!-- ############### -->
  <bean id="baseFileTransferDao" class="org.ikasan.connector.basefiletransfer.outbound.persistence.HibernateBaseFileTransferDaoImpl">
        <!-- data source (for tables associated with our File Transfer connector) -->
    <constructor-arg ref="xaTx-BaseFileTransferHibernateSessionFactory" />
  </bean>
  <!-- We lazily initialise as we don't always need large file support -->
  <bean id="fileChunkDao" lazy-init="true" class="org.ikasan.connector.util.chunking.model.dao.HibernateFileChunkDao">
		<!-- data source (for tables associated with our Chunked File Transfers) -->
    <constructor-arg ref="fileChunkSessionFactory" />
  </bean>

    <!-- ########### -->
    <!-- Other Beans -->
    <!-- ########### -->

	<!--  supplier of MD5 algorithm support -->
  <bean id="checksumSupplier" class="org.ikasan.common.util.checksum.Md5ChecksumSupplier" scope="singleton" />

  <!-- environment utility class -->
  <bean id="env" class="org.ikasan.common.util.Env" />
</beans>
